
f103-stone-lcd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a70  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003b7c  08003b7c  00013b7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003bbc  08003bbc  00020034  2**0
                  CONTENTS
  4 .ARM          00000000  08003bbc  08003bbc  00020034  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003bbc  08003bbc  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003bbc  08003bbc  00013bbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003bc0  08003bc0  00013bc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  08003bc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000138  20000038  08003bf8  00020038  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000170  08003bf8  00020170  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000adf4  00000000  00000000  0002005d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b73  00000000  00000000  0002ae51  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cc0  00000000  00000000  0002c9c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bf0  00000000  00000000  0002d688  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000140ec  00000000  00000000  0002e278  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008fa4  00000000  00000000  00042364  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00072a58  00000000  00000000  0004b308  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bdd60  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003518  00000000  00000000  000bdddc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000038 	.word	0x20000038
 8000128:	00000000 	.word	0x00000000
 800012c:	08003b64 	.word	0x08003b64

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000003c 	.word	0x2000003c
 8000148:	08003b64 	.word	0x08003b64

0800014c <HAL_TIM_PeriodElapsedCallback>:
static void MX_TIM4_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_TIM3_Init(void);
/* USER CODE BEGIN PFP */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800014c:	b490      	push	{r4, r7}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	mMilis++;
 8000154:	4b06      	ldr	r3, [pc, #24]	; (8000170 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000156:	e9d3 1200 	ldrd	r1, r2, [r3]
 800015a:	1c4b      	adds	r3, r1, #1
 800015c:	f142 0400 	adc.w	r4, r2, #0
 8000160:	4a03      	ldr	r2, [pc, #12]	; (8000170 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000162:	e9c2 3400 	strd	r3, r4, [r2]
}
 8000166:	bf00      	nop
 8000168:	3708      	adds	r7, #8
 800016a:	46bd      	mov	sp, r7
 800016c:	bc90      	pop	{r4, r7}
 800016e:	4770      	bx	lr
 8000170:	20000058 	.word	0x20000058

08000174 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000174:	b480      	push	{r7}
 8000176:	b083      	sub	sp, #12
 8000178:	af00      	add	r7, sp, #0
 800017a:	6078      	str	r0, [r7, #4]
	uartFlag = 1;
 800017c:	4b03      	ldr	r3, [pc, #12]	; (800018c <HAL_UART_RxCpltCallback+0x18>)
 800017e:	2201      	movs	r2, #1
 8000180:	701a      	strb	r2, [r3, #0]
}
 8000182:	bf00      	nop
 8000184:	370c      	adds	r7, #12
 8000186:	46bd      	mov	sp, r7
 8000188:	bc80      	pop	{r7}
 800018a:	4770      	bx	lr
 800018c:	20000068 	.word	0x20000068

08000190 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000190:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8000194:	b082      	sub	sp, #8
 8000196:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000198:	f000 fca2 	bl	8000ae0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800019c:	f000 f8f2 	bl	8000384 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001a0:	f000 fa5c 	bl	800065c <MX_GPIO_Init>
  MX_ADC1_Init();
 80001a4:	f000 f94a 	bl	800043c <MX_ADC1_Init>
  MX_TIM4_Init();
 80001a8:	f000 f9e0 	bl	800056c <MX_TIM4_Init>
  MX_USART2_UART_Init();
 80001ac:	f000 fa2c 	bl	8000608 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80001b0:	f000 f982 	bl	80004b8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim4);
 80001b4:	4865      	ldr	r0, [pc, #404]	; (800034c <main+0x1bc>)
 80001b6:	f002 f9f8 	bl	80025aa <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart2, readData, BUFF_SIZE);
 80001ba:	2209      	movs	r2, #9
 80001bc:	4964      	ldr	r1, [pc, #400]	; (8000350 <main+0x1c0>)
 80001be:	4865      	ldr	r0, [pc, #404]	; (8000354 <main+0x1c4>)
 80001c0:	f003 f8fe 	bl	80033c0 <HAL_UART_Receive_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80001c4:	2100      	movs	r1, #0
 80001c6:	4864      	ldr	r0, [pc, #400]	; (8000358 <main+0x1c8>)
 80001c8:	f002 fa3e 	bl	8002648 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_UART_Receive_IT(&huart2, readData, BUFF_SIZE);
 80001cc:	2209      	movs	r2, #9
 80001ce:	4960      	ldr	r1, [pc, #384]	; (8000350 <main+0x1c0>)
 80001d0:	4860      	ldr	r0, [pc, #384]	; (8000354 <main+0x1c4>)
 80001d2:	f003 f8f5 	bl	80033c0 <HAL_UART_Receive_IT>

	  if(uartFlag)
 80001d6:	4b61      	ldr	r3, [pc, #388]	; (800035c <main+0x1cc>)
 80001d8:	781b      	ldrb	r3, [r3, #0]
 80001da:	2b00      	cmp	r3, #0
 80001dc:	d06b      	beq.n	80002b6 <main+0x126>
	  {
		  if(readData[0] != 0xA5 && readData[1] != 0x5A) continue;
 80001de:	4b5c      	ldr	r3, [pc, #368]	; (8000350 <main+0x1c0>)
 80001e0:	781b      	ldrb	r3, [r3, #0]
 80001e2:	2ba5      	cmp	r3, #165	; 0xa5
 80001e4:	d004      	beq.n	80001f0 <main+0x60>
 80001e6:	4b5a      	ldr	r3, [pc, #360]	; (8000350 <main+0x1c0>)
 80001e8:	785b      	ldrb	r3, [r3, #1]
 80001ea:	2b5a      	cmp	r3, #90	; 0x5a
 80001ec:	f040 80ac 	bne.w	8000348 <main+0x1b8>

		  uint16_t mAdr = (readData[4] << 8) | (readData[5]);
 80001f0:	4b57      	ldr	r3, [pc, #348]	; (8000350 <main+0x1c0>)
 80001f2:	791b      	ldrb	r3, [r3, #4]
 80001f4:	021b      	lsls	r3, r3, #8
 80001f6:	b21a      	sxth	r2, r3
 80001f8:	4b55      	ldr	r3, [pc, #340]	; (8000350 <main+0x1c0>)
 80001fa:	795b      	ldrb	r3, [r3, #5]
 80001fc:	b21b      	sxth	r3, r3
 80001fe:	4313      	orrs	r3, r2
 8000200:	b21b      	sxth	r3, r3
 8000202:	80fb      	strh	r3, [r7, #6]

		  uint16_t mData = (readData[7] << 8) | (readData[8]);
 8000204:	4b52      	ldr	r3, [pc, #328]	; (8000350 <main+0x1c0>)
 8000206:	79db      	ldrb	r3, [r3, #7]
 8000208:	021b      	lsls	r3, r3, #8
 800020a:	b21a      	sxth	r2, r3
 800020c:	4b50      	ldr	r3, [pc, #320]	; (8000350 <main+0x1c0>)
 800020e:	7a1b      	ldrb	r3, [r3, #8]
 8000210:	b21b      	sxth	r3, r3
 8000212:	4313      	orrs	r3, r2
 8000214:	b21b      	sxth	r3, r3
 8000216:	80bb      	strh	r3, [r7, #4]

		  switch (mAdr)
 8000218:	88fb      	ldrh	r3, [r7, #6]
 800021a:	f241 62a2 	movw	r2, #5794	; 0x16a2
 800021e:	4293      	cmp	r3, r2
 8000220:	d017      	beq.n	8000252 <main+0xc2>
 8000222:	f241 62a2 	movw	r2, #5794	; 0x16a2
 8000226:	4293      	cmp	r3, r2
 8000228:	dc04      	bgt.n	8000234 <main+0xa4>
 800022a:	f241 62a1 	movw	r2, #5793	; 0x16a1
 800022e:	4293      	cmp	r3, r2
 8000230:	d009      	beq.n	8000246 <main+0xb6>
 8000232:	e03d      	b.n	80002b0 <main+0x120>
 8000234:	f641 1292 	movw	r2, #6546	; 0x1992
 8000238:	4293      	cmp	r3, r2
 800023a:	d010      	beq.n	800025e <main+0xce>
 800023c:	f244 0201 	movw	r2, #16385	; 0x4001
 8000240:	4293      	cmp	r3, r2
 8000242:	d02b      	beq.n	800029c <main+0x10c>
 8000244:	e034      	b.n	80002b0 <main+0x120>
		  {
		  	  case 0x16A1:                //button1 adress
		  		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000246:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800024a:	4845      	ldr	r0, [pc, #276]	; (8000360 <main+0x1d0>)
 800024c:	f001 fbdc 	bl	8001a08 <HAL_GPIO_TogglePin>
		        break;
 8000250:	e02e      	b.n	80002b0 <main+0x120>
		      case 0x16A2:                //button2 adress
			  	HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000252:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000256:	4842      	ldr	r0, [pc, #264]	; (8000360 <main+0x1d0>)
 8000258:	f001 fbd6 	bl	8001a08 <HAL_GPIO_TogglePin>
		        break;
 800025c:	e028      	b.n	80002b0 <main+0x120>
		      case 0x1992:                //switch adress
		    	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, (mAdr == 1 ? GPIO_PIN_SET : GPIO_PIN_RESET));
 800025e:	88fb      	ldrh	r3, [r7, #6]
 8000260:	2b01      	cmp	r3, #1
 8000262:	bf0c      	ite	eq
 8000264:	2301      	moveq	r3, #1
 8000266:	2300      	movne	r3, #0
 8000268:	b2db      	uxtb	r3, r3
 800026a:	461a      	mov	r2, r3
 800026c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000270:	483b      	ldr	r0, [pc, #236]	; (8000360 <main+0x1d0>)
 8000272:	f001 fbb1 	bl	80019d8 <HAL_GPIO_WritePin>
		        if(mData)                 //send string value according to switch status
 8000276:	88bb      	ldrh	r3, [r7, #4]
 8000278:	2b00      	cmp	r3, #0
 800027a:	d007      	beq.n	800028c <main+0xfc>
		        {
		        	HAL_UART_Transmit(&huart2, arrOn, sizeof(arrOn), 1000);
 800027c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000280:	220f      	movs	r2, #15
 8000282:	4938      	ldr	r1, [pc, #224]	; (8000364 <main+0x1d4>)
 8000284:	4833      	ldr	r0, [pc, #204]	; (8000354 <main+0x1c4>)
 8000286:	f003 f802 	bl	800328e <HAL_UART_Transmit>
		        }else{
		        	HAL_UART_Transmit(&huart2, arrOff, sizeof(arrOff), 1000);
		        }
		        break;
 800028a:	e011      	b.n	80002b0 <main+0x120>
		        	HAL_UART_Transmit(&huart2, arrOff, sizeof(arrOff), 1000);
 800028c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000290:	220f      	movs	r2, #15
 8000292:	4935      	ldr	r1, [pc, #212]	; (8000368 <main+0x1d8>)
 8000294:	482f      	ldr	r0, [pc, #188]	; (8000354 <main+0x1c4>)
 8000296:	f002 fffa 	bl	800328e <HAL_UART_Transmit>
		        break;
 800029a:	e009      	b.n	80002b0 <main+0x120>
		  case 0x4001:
			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, mData * 10);
 800029c:	88ba      	ldrh	r2, [r7, #4]
 800029e:	4613      	mov	r3, r2
 80002a0:	009b      	lsls	r3, r3, #2
 80002a2:	4413      	add	r3, r2
 80002a4:	005b      	lsls	r3, r3, #1
 80002a6:	461a      	mov	r2, r3
 80002a8:	4b2b      	ldr	r3, [pc, #172]	; (8000358 <main+0x1c8>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	635a      	str	r2, [r3, #52]	; 0x34
			  break;
 80002ae:	bf00      	nop
		  }
		  uartFlag = 0;
 80002b0:	4b2a      	ldr	r3, [pc, #168]	; (800035c <main+0x1cc>)
 80002b2:	2200      	movs	r2, #0
 80002b4:	701a      	strb	r2, [r3, #0]
	  }

	  HAL_ADC_Start(&hadc1);
 80002b6:	482d      	ldr	r0, [pc, #180]	; (800036c <main+0x1dc>)
 80002b8:	f000 fd4c 	bl	8000d54 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 1000);
 80002bc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80002c0:	482a      	ldr	r0, [pc, #168]	; (800036c <main+0x1dc>)
 80002c2:	f000 fe21 	bl	8000f08 <HAL_ADC_PollForConversion>
	  adcVal = HAL_ADC_GetValue(&hadc1);
 80002c6:	4829      	ldr	r0, [pc, #164]	; (800036c <main+0x1dc>)
 80002c8:	f000 ff18 	bl	80010fc <HAL_ADC_GetValue>
 80002cc:	4603      	mov	r3, r0
 80002ce:	b29a      	uxth	r2, r3
 80002d0:	4b27      	ldr	r3, [pc, #156]	; (8000370 <main+0x1e0>)
 80002d2:	801a      	strh	r2, [r3, #0]
	  adcVal = adcVal / 8;
 80002d4:	4b26      	ldr	r3, [pc, #152]	; (8000370 <main+0x1e0>)
 80002d6:	881b      	ldrh	r3, [r3, #0]
 80002d8:	08db      	lsrs	r3, r3, #3
 80002da:	b29a      	uxth	r2, r3
 80002dc:	4b24      	ldr	r3, [pc, #144]	; (8000370 <main+0x1e0>)
 80002de:	801a      	strh	r2, [r3, #0]
	  HAL_ADC_Stop(&hadc1);
 80002e0:	4822      	ldr	r0, [pc, #136]	; (800036c <main+0x1dc>)
 80002e2:	f000 fde5 	bl	8000eb0 <HAL_ADC_Stop>

	  if(mMilis - lastTime1 > 100)
 80002e6:	4b23      	ldr	r3, [pc, #140]	; (8000374 <main+0x1e4>)
 80002e8:	e9d3 1200 	ldrd	r1, r2, [r3]
 80002ec:	4b22      	ldr	r3, [pc, #136]	; (8000378 <main+0x1e8>)
 80002ee:	e9d3 bc00 	ldrd	fp, ip, [r3]
 80002f2:	460b      	mov	r3, r1
 80002f4:	4614      	mov	r4, r2
 80002f6:	ebb3 030b 	subs.w	r3, r3, fp
 80002fa:	eb64 040c 	sbc.w	r4, r4, ip
 80002fe:	2c00      	cmp	r4, #0
 8000300:	bf08      	it	eq
 8000302:	2b65      	cmpeq	r3, #101	; 0x65
 8000304:	f4ff af62 	bcc.w	80001cc <main+0x3c>
	  {
		  HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 8000308:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800030c:	481b      	ldr	r0, [pc, #108]	; (800037c <main+0x1ec>)
 800030e:	f001 fb7b 	bl	8001a08 <HAL_GPIO_TogglePin>
		  uint8_t sendValL = adcVal & 0xFF;
 8000312:	4b17      	ldr	r3, [pc, #92]	; (8000370 <main+0x1e0>)
 8000314:	881b      	ldrh	r3, [r3, #0]
 8000316:	70fb      	strb	r3, [r7, #3]
		  uint8_t sendValM = (adcVal & 0xFF00) >> 8;
 8000318:	4b15      	ldr	r3, [pc, #84]	; (8000370 <main+0x1e0>)
 800031a:	881b      	ldrh	r3, [r3, #0]
 800031c:	0a1b      	lsrs	r3, r3, #8
 800031e:	b29b      	uxth	r3, r3
 8000320:	70bb      	strb	r3, [r7, #2]
		  arr[6] = sendValM;
 8000322:	4a17      	ldr	r2, [pc, #92]	; (8000380 <main+0x1f0>)
 8000324:	78bb      	ldrb	r3, [r7, #2]
 8000326:	7193      	strb	r3, [r2, #6]
		  arr[7] = sendValL;
 8000328:	4a15      	ldr	r2, [pc, #84]	; (8000380 <main+0x1f0>)
 800032a:	78fb      	ldrb	r3, [r7, #3]
 800032c:	71d3      	strb	r3, [r2, #7]
		  HAL_UART_Transmit(&huart2, arr, sizeof(arr), 1000);
 800032e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000332:	2208      	movs	r2, #8
 8000334:	4912      	ldr	r1, [pc, #72]	; (8000380 <main+0x1f0>)
 8000336:	4807      	ldr	r0, [pc, #28]	; (8000354 <main+0x1c4>)
 8000338:	f002 ffa9 	bl	800328e <HAL_UART_Transmit>
		  lastTime1 = mMilis;
 800033c:	4b0d      	ldr	r3, [pc, #52]	; (8000374 <main+0x1e4>)
 800033e:	cb18      	ldmia	r3, {r3, r4}
 8000340:	4a0d      	ldr	r2, [pc, #52]	; (8000378 <main+0x1e8>)
 8000342:	e9c2 3400 	strd	r3, r4, [r2]
 8000346:	e741      	b.n	80001cc <main+0x3c>
		  if(readData[0] != 0xA5 && readData[1] != 0x5A) continue;
 8000348:	bf00      	nop
	  HAL_UART_Receive_IT(&huart2, readData, BUFF_SIZE);
 800034a:	e73f      	b.n	80001cc <main+0x3c>
 800034c:	2000006c 	.word	0x2000006c
 8000350:	20000120 	.word	0x20000120
 8000354:	2000012c 	.word	0x2000012c
 8000358:	200000ac 	.word	0x200000ac
 800035c:	20000068 	.word	0x20000068
 8000360:	40010c00 	.word	0x40010c00
 8000364:	20000008 	.word	0x20000008
 8000368:	20000018 	.word	0x20000018
 800036c:	200000ec 	.word	0x200000ec
 8000370:	2000011c 	.word	0x2000011c
 8000374:	20000058 	.word	0x20000058
 8000378:	20000060 	.word	0x20000060
 800037c:	40011000 	.word	0x40011000
 8000380:	20000000 	.word	0x20000000

08000384 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b094      	sub	sp, #80	; 0x50
 8000388:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800038a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800038e:	2228      	movs	r2, #40	; 0x28
 8000390:	2100      	movs	r1, #0
 8000392:	4618      	mov	r0, r3
 8000394:	f003 fbde 	bl	8003b54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000398:	f107 0314 	add.w	r3, r7, #20
 800039c:	2200      	movs	r2, #0
 800039e:	601a      	str	r2, [r3, #0]
 80003a0:	605a      	str	r2, [r3, #4]
 80003a2:	609a      	str	r2, [r3, #8]
 80003a4:	60da      	str	r2, [r3, #12]
 80003a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003a8:	1d3b      	adds	r3, r7, #4
 80003aa:	2200      	movs	r2, #0
 80003ac:	601a      	str	r2, [r3, #0]
 80003ae:	605a      	str	r2, [r3, #4]
 80003b0:	609a      	str	r2, [r3, #8]
 80003b2:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003b4:	2301      	movs	r3, #1
 80003b6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003be:	2300      	movs	r3, #0
 80003c0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003c2:	2301      	movs	r3, #1
 80003c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003c6:	2302      	movs	r3, #2
 80003c8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003d0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003da:	4618      	mov	r0, r3
 80003dc:	f001 fb2c 	bl	8001a38 <HAL_RCC_OscConfig>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d001      	beq.n	80003ea <SystemClock_Config+0x66>
  {
    Error_Handler();
 80003e6:	f000 f9a7 	bl	8000738 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003ea:	230f      	movs	r3, #15
 80003ec:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003ee:	2302      	movs	r3, #2
 80003f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003f2:	2300      	movs	r3, #0
 80003f4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003fa:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003fc:	2300      	movs	r3, #0
 80003fe:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000400:	f107 0314 	add.w	r3, r7, #20
 8000404:	2102      	movs	r1, #2
 8000406:	4618      	mov	r0, r3
 8000408:	f001 fd96 	bl	8001f38 <HAL_RCC_ClockConfig>
 800040c:	4603      	mov	r3, r0
 800040e:	2b00      	cmp	r3, #0
 8000410:	d001      	beq.n	8000416 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000412:	f000 f991 	bl	8000738 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000416:	2302      	movs	r3, #2
 8000418:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800041a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800041e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000420:	1d3b      	adds	r3, r7, #4
 8000422:	4618      	mov	r0, r3
 8000424:	f001 ff24 	bl	8002270 <HAL_RCCEx_PeriphCLKConfig>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d001      	beq.n	8000432 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800042e:	f000 f983 	bl	8000738 <Error_Handler>
  }
}
 8000432:	bf00      	nop
 8000434:	3750      	adds	r7, #80	; 0x50
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}
	...

0800043c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b084      	sub	sp, #16
 8000440:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000442:	1d3b      	adds	r3, r7, #4
 8000444:	2200      	movs	r2, #0
 8000446:	601a      	str	r2, [r3, #0]
 8000448:	605a      	str	r2, [r3, #4]
 800044a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 800044c:	4b18      	ldr	r3, [pc, #96]	; (80004b0 <MX_ADC1_Init+0x74>)
 800044e:	4a19      	ldr	r2, [pc, #100]	; (80004b4 <MX_ADC1_Init+0x78>)
 8000450:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000452:	4b17      	ldr	r3, [pc, #92]	; (80004b0 <MX_ADC1_Init+0x74>)
 8000454:	2200      	movs	r2, #0
 8000456:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000458:	4b15      	ldr	r3, [pc, #84]	; (80004b0 <MX_ADC1_Init+0x74>)
 800045a:	2200      	movs	r2, #0
 800045c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800045e:	4b14      	ldr	r3, [pc, #80]	; (80004b0 <MX_ADC1_Init+0x74>)
 8000460:	2200      	movs	r2, #0
 8000462:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000464:	4b12      	ldr	r3, [pc, #72]	; (80004b0 <MX_ADC1_Init+0x74>)
 8000466:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800046a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800046c:	4b10      	ldr	r3, [pc, #64]	; (80004b0 <MX_ADC1_Init+0x74>)
 800046e:	2200      	movs	r2, #0
 8000470:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000472:	4b0f      	ldr	r3, [pc, #60]	; (80004b0 <MX_ADC1_Init+0x74>)
 8000474:	2201      	movs	r2, #1
 8000476:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000478:	480d      	ldr	r0, [pc, #52]	; (80004b0 <MX_ADC1_Init+0x74>)
 800047a:	f000 fb93 	bl	8000ba4 <HAL_ADC_Init>
 800047e:	4603      	mov	r3, r0
 8000480:	2b00      	cmp	r3, #0
 8000482:	d001      	beq.n	8000488 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000484:	f000 f958 	bl	8000738 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000488:	2300      	movs	r3, #0
 800048a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800048c:	2301      	movs	r3, #1
 800048e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8000490:	2306      	movs	r3, #6
 8000492:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000494:	1d3b      	adds	r3, r7, #4
 8000496:	4619      	mov	r1, r3
 8000498:	4805      	ldr	r0, [pc, #20]	; (80004b0 <MX_ADC1_Init+0x74>)
 800049a:	f000 fe3b 	bl	8001114 <HAL_ADC_ConfigChannel>
 800049e:	4603      	mov	r3, r0
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d001      	beq.n	80004a8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80004a4:	f000 f948 	bl	8000738 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80004a8:	bf00      	nop
 80004aa:	3710      	adds	r7, #16
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	200000ec 	.word	0x200000ec
 80004b4:	40012400 	.word	0x40012400

080004b8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b08a      	sub	sp, #40	; 0x28
 80004bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004be:	f107 0320 	add.w	r3, r7, #32
 80004c2:	2200      	movs	r2, #0
 80004c4:	601a      	str	r2, [r3, #0]
 80004c6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004c8:	1d3b      	adds	r3, r7, #4
 80004ca:	2200      	movs	r2, #0
 80004cc:	601a      	str	r2, [r3, #0]
 80004ce:	605a      	str	r2, [r3, #4]
 80004d0:	609a      	str	r2, [r3, #8]
 80004d2:	60da      	str	r2, [r3, #12]
 80004d4:	611a      	str	r2, [r3, #16]
 80004d6:	615a      	str	r2, [r3, #20]
 80004d8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80004da:	4b22      	ldr	r3, [pc, #136]	; (8000564 <MX_TIM3_Init+0xac>)
 80004dc:	4a22      	ldr	r2, [pc, #136]	; (8000568 <MX_TIM3_Init+0xb0>)
 80004de:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 80004e0:	4b20      	ldr	r3, [pc, #128]	; (8000564 <MX_TIM3_Init+0xac>)
 80004e2:	2247      	movs	r2, #71	; 0x47
 80004e4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004e6:	4b1f      	ldr	r3, [pc, #124]	; (8000564 <MX_TIM3_Init+0xac>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80004ec:	4b1d      	ldr	r3, [pc, #116]	; (8000564 <MX_TIM3_Init+0xac>)
 80004ee:	f240 32e7 	movw	r2, #999	; 0x3e7
 80004f2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004f4:	4b1b      	ldr	r3, [pc, #108]	; (8000564 <MX_TIM3_Init+0xac>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004fa:	4b1a      	ldr	r3, [pc, #104]	; (8000564 <MX_TIM3_Init+0xac>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000500:	4818      	ldr	r0, [pc, #96]	; (8000564 <MX_TIM3_Init+0xac>)
 8000502:	f002 f875 	bl	80025f0 <HAL_TIM_PWM_Init>
 8000506:	4603      	mov	r3, r0
 8000508:	2b00      	cmp	r3, #0
 800050a:	d001      	beq.n	8000510 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800050c:	f000 f914 	bl	8000738 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000510:	2300      	movs	r3, #0
 8000512:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000514:	2300      	movs	r3, #0
 8000516:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000518:	f107 0320 	add.w	r3, r7, #32
 800051c:	4619      	mov	r1, r3
 800051e:	4811      	ldr	r0, [pc, #68]	; (8000564 <MX_TIM3_Init+0xac>)
 8000520:	f002 fe12 	bl	8003148 <HAL_TIMEx_MasterConfigSynchronization>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d001      	beq.n	800052e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800052a:	f000 f905 	bl	8000738 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800052e:	2360      	movs	r3, #96	; 0x60
 8000530:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000532:	2300      	movs	r3, #0
 8000534:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000536:	2300      	movs	r3, #0
 8000538:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800053a:	2300      	movs	r3, #0
 800053c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800053e:	1d3b      	adds	r3, r7, #4
 8000540:	2200      	movs	r2, #0
 8000542:	4619      	mov	r1, r3
 8000544:	4807      	ldr	r0, [pc, #28]	; (8000564 <MX_TIM3_Init+0xac>)
 8000546:	f002 f9b9 	bl	80028bc <HAL_TIM_PWM_ConfigChannel>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d001      	beq.n	8000554 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000550:	f000 f8f2 	bl	8000738 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000554:	4803      	ldr	r0, [pc, #12]	; (8000564 <MX_TIM3_Init+0xac>)
 8000556:	f000 f9a7 	bl	80008a8 <HAL_TIM_MspPostInit>

}
 800055a:	bf00      	nop
 800055c:	3728      	adds	r7, #40	; 0x28
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	200000ac 	.word	0x200000ac
 8000568:	40000400 	.word	0x40000400

0800056c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b086      	sub	sp, #24
 8000570:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000572:	f107 0308 	add.w	r3, r7, #8
 8000576:	2200      	movs	r2, #0
 8000578:	601a      	str	r2, [r3, #0]
 800057a:	605a      	str	r2, [r3, #4]
 800057c:	609a      	str	r2, [r3, #8]
 800057e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000580:	463b      	mov	r3, r7
 8000582:	2200      	movs	r2, #0
 8000584:	601a      	str	r2, [r3, #0]
 8000586:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000588:	4b1d      	ldr	r3, [pc, #116]	; (8000600 <MX_TIM4_Init+0x94>)
 800058a:	4a1e      	ldr	r2, [pc, #120]	; (8000604 <MX_TIM4_Init+0x98>)
 800058c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 287;
 800058e:	4b1c      	ldr	r3, [pc, #112]	; (8000600 <MX_TIM4_Init+0x94>)
 8000590:	f240 121f 	movw	r2, #287	; 0x11f
 8000594:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000596:	4b1a      	ldr	r3, [pc, #104]	; (8000600 <MX_TIM4_Init+0x94>)
 8000598:	2200      	movs	r2, #0
 800059a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 249;
 800059c:	4b18      	ldr	r3, [pc, #96]	; (8000600 <MX_TIM4_Init+0x94>)
 800059e:	22f9      	movs	r2, #249	; 0xf9
 80005a0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005a2:	4b17      	ldr	r3, [pc, #92]	; (8000600 <MX_TIM4_Init+0x94>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005a8:	4b15      	ldr	r3, [pc, #84]	; (8000600 <MX_TIM4_Init+0x94>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80005ae:	4814      	ldr	r0, [pc, #80]	; (8000600 <MX_TIM4_Init+0x94>)
 80005b0:	f001 ffd0 	bl	8002554 <HAL_TIM_Base_Init>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80005ba:	f000 f8bd 	bl	8000738 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005c2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80005c4:	f107 0308 	add.w	r3, r7, #8
 80005c8:	4619      	mov	r1, r3
 80005ca:	480d      	ldr	r0, [pc, #52]	; (8000600 <MX_TIM4_Init+0x94>)
 80005cc:	f002 fa3c 	bl	8002a48 <HAL_TIM_ConfigClockSource>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80005d6:	f000 f8af 	bl	8000738 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005da:	2300      	movs	r3, #0
 80005dc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005de:	2300      	movs	r3, #0
 80005e0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80005e2:	463b      	mov	r3, r7
 80005e4:	4619      	mov	r1, r3
 80005e6:	4806      	ldr	r0, [pc, #24]	; (8000600 <MX_TIM4_Init+0x94>)
 80005e8:	f002 fdae 	bl	8003148 <HAL_TIMEx_MasterConfigSynchronization>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80005f2:	f000 f8a1 	bl	8000738 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80005f6:	bf00      	nop
 80005f8:	3718      	adds	r7, #24
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	2000006c 	.word	0x2000006c
 8000604:	40000800 	.word	0x40000800

08000608 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800060c:	4b11      	ldr	r3, [pc, #68]	; (8000654 <MX_USART2_UART_Init+0x4c>)
 800060e:	4a12      	ldr	r2, [pc, #72]	; (8000658 <MX_USART2_UART_Init+0x50>)
 8000610:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000612:	4b10      	ldr	r3, [pc, #64]	; (8000654 <MX_USART2_UART_Init+0x4c>)
 8000614:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000618:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800061a:	4b0e      	ldr	r3, [pc, #56]	; (8000654 <MX_USART2_UART_Init+0x4c>)
 800061c:	2200      	movs	r2, #0
 800061e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000620:	4b0c      	ldr	r3, [pc, #48]	; (8000654 <MX_USART2_UART_Init+0x4c>)
 8000622:	2200      	movs	r2, #0
 8000624:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000626:	4b0b      	ldr	r3, [pc, #44]	; (8000654 <MX_USART2_UART_Init+0x4c>)
 8000628:	2200      	movs	r2, #0
 800062a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800062c:	4b09      	ldr	r3, [pc, #36]	; (8000654 <MX_USART2_UART_Init+0x4c>)
 800062e:	220c      	movs	r2, #12
 8000630:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000632:	4b08      	ldr	r3, [pc, #32]	; (8000654 <MX_USART2_UART_Init+0x4c>)
 8000634:	2200      	movs	r2, #0
 8000636:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000638:	4b06      	ldr	r3, [pc, #24]	; (8000654 <MX_USART2_UART_Init+0x4c>)
 800063a:	2200      	movs	r2, #0
 800063c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800063e:	4805      	ldr	r0, [pc, #20]	; (8000654 <MX_USART2_UART_Init+0x4c>)
 8000640:	f002 fdd8 	bl	80031f4 <HAL_UART_Init>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800064a:	f000 f875 	bl	8000738 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800064e:	bf00      	nop
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	2000012c 	.word	0x2000012c
 8000658:	40004400 	.word	0x40004400

0800065c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b088      	sub	sp, #32
 8000660:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000662:	f107 0310 	add.w	r3, r7, #16
 8000666:	2200      	movs	r2, #0
 8000668:	601a      	str	r2, [r3, #0]
 800066a:	605a      	str	r2, [r3, #4]
 800066c:	609a      	str	r2, [r3, #8]
 800066e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000670:	4b2e      	ldr	r3, [pc, #184]	; (800072c <MX_GPIO_Init+0xd0>)
 8000672:	699b      	ldr	r3, [r3, #24]
 8000674:	4a2d      	ldr	r2, [pc, #180]	; (800072c <MX_GPIO_Init+0xd0>)
 8000676:	f043 0310 	orr.w	r3, r3, #16
 800067a:	6193      	str	r3, [r2, #24]
 800067c:	4b2b      	ldr	r3, [pc, #172]	; (800072c <MX_GPIO_Init+0xd0>)
 800067e:	699b      	ldr	r3, [r3, #24]
 8000680:	f003 0310 	and.w	r3, r3, #16
 8000684:	60fb      	str	r3, [r7, #12]
 8000686:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000688:	4b28      	ldr	r3, [pc, #160]	; (800072c <MX_GPIO_Init+0xd0>)
 800068a:	699b      	ldr	r3, [r3, #24]
 800068c:	4a27      	ldr	r2, [pc, #156]	; (800072c <MX_GPIO_Init+0xd0>)
 800068e:	f043 0320 	orr.w	r3, r3, #32
 8000692:	6193      	str	r3, [r2, #24]
 8000694:	4b25      	ldr	r3, [pc, #148]	; (800072c <MX_GPIO_Init+0xd0>)
 8000696:	699b      	ldr	r3, [r3, #24]
 8000698:	f003 0320 	and.w	r3, r3, #32
 800069c:	60bb      	str	r3, [r7, #8]
 800069e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a0:	4b22      	ldr	r3, [pc, #136]	; (800072c <MX_GPIO_Init+0xd0>)
 80006a2:	699b      	ldr	r3, [r3, #24]
 80006a4:	4a21      	ldr	r2, [pc, #132]	; (800072c <MX_GPIO_Init+0xd0>)
 80006a6:	f043 0304 	orr.w	r3, r3, #4
 80006aa:	6193      	str	r3, [r2, #24]
 80006ac:	4b1f      	ldr	r3, [pc, #124]	; (800072c <MX_GPIO_Init+0xd0>)
 80006ae:	699b      	ldr	r3, [r3, #24]
 80006b0:	f003 0304 	and.w	r3, r3, #4
 80006b4:	607b      	str	r3, [r7, #4]
 80006b6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006b8:	4b1c      	ldr	r3, [pc, #112]	; (800072c <MX_GPIO_Init+0xd0>)
 80006ba:	699b      	ldr	r3, [r3, #24]
 80006bc:	4a1b      	ldr	r2, [pc, #108]	; (800072c <MX_GPIO_Init+0xd0>)
 80006be:	f043 0308 	orr.w	r3, r3, #8
 80006c2:	6193      	str	r3, [r2, #24]
 80006c4:	4b19      	ldr	r3, [pc, #100]	; (800072c <MX_GPIO_Init+0xd0>)
 80006c6:	699b      	ldr	r3, [r3, #24]
 80006c8:	f003 0308 	and.w	r3, r3, #8
 80006cc:	603b      	str	r3, [r7, #0]
 80006ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 80006d0:	2200      	movs	r2, #0
 80006d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006d6:	4816      	ldr	r0, [pc, #88]	; (8000730 <MX_GPIO_Init+0xd4>)
 80006d8:	f001 f97e 	bl	80019d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED3_Pin|LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 80006dc:	2200      	movs	r2, #0
 80006de:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 80006e2:	4814      	ldr	r0, [pc, #80]	; (8000734 <MX_GPIO_Init+0xd8>)
 80006e4:	f001 f978 	bl	80019d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED4_Pin */
  GPIO_InitStruct.Pin = LED4_Pin;
 80006e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ee:	2301      	movs	r3, #1
 80006f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f2:	2300      	movs	r3, #0
 80006f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f6:	2302      	movs	r3, #2
 80006f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 80006fa:	f107 0310 	add.w	r3, r7, #16
 80006fe:	4619      	mov	r1, r3
 8000700:	480b      	ldr	r0, [pc, #44]	; (8000730 <MX_GPIO_Init+0xd4>)
 8000702:	f001 f80f 	bl	8001724 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED2_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin|LED1_Pin;
 8000706:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800070a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800070c:	2301      	movs	r3, #1
 800070e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000710:	2300      	movs	r3, #0
 8000712:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000714:	2302      	movs	r3, #2
 8000716:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000718:	f107 0310 	add.w	r3, r7, #16
 800071c:	4619      	mov	r1, r3
 800071e:	4805      	ldr	r0, [pc, #20]	; (8000734 <MX_GPIO_Init+0xd8>)
 8000720:	f001 f800 	bl	8001724 <HAL_GPIO_Init>

}
 8000724:	bf00      	nop
 8000726:	3720      	adds	r7, #32
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	40021000 	.word	0x40021000
 8000730:	40011000 	.word	0x40011000
 8000734:	40010c00 	.word	0x40010c00

08000738 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800073c:	bf00      	nop
 800073e:	46bd      	mov	sp, r7
 8000740:	bc80      	pop	{r7}
 8000742:	4770      	bx	lr

08000744 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000744:	b480      	push	{r7}
 8000746:	b085      	sub	sp, #20
 8000748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800074a:	4b15      	ldr	r3, [pc, #84]	; (80007a0 <HAL_MspInit+0x5c>)
 800074c:	699b      	ldr	r3, [r3, #24]
 800074e:	4a14      	ldr	r2, [pc, #80]	; (80007a0 <HAL_MspInit+0x5c>)
 8000750:	f043 0301 	orr.w	r3, r3, #1
 8000754:	6193      	str	r3, [r2, #24]
 8000756:	4b12      	ldr	r3, [pc, #72]	; (80007a0 <HAL_MspInit+0x5c>)
 8000758:	699b      	ldr	r3, [r3, #24]
 800075a:	f003 0301 	and.w	r3, r3, #1
 800075e:	60bb      	str	r3, [r7, #8]
 8000760:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000762:	4b0f      	ldr	r3, [pc, #60]	; (80007a0 <HAL_MspInit+0x5c>)
 8000764:	69db      	ldr	r3, [r3, #28]
 8000766:	4a0e      	ldr	r2, [pc, #56]	; (80007a0 <HAL_MspInit+0x5c>)
 8000768:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800076c:	61d3      	str	r3, [r2, #28]
 800076e:	4b0c      	ldr	r3, [pc, #48]	; (80007a0 <HAL_MspInit+0x5c>)
 8000770:	69db      	ldr	r3, [r3, #28]
 8000772:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000776:	607b      	str	r3, [r7, #4]
 8000778:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800077a:	4b0a      	ldr	r3, [pc, #40]	; (80007a4 <HAL_MspInit+0x60>)
 800077c:	685b      	ldr	r3, [r3, #4]
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000786:	60fb      	str	r3, [r7, #12]
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800078e:	60fb      	str	r3, [r7, #12]
 8000790:	4a04      	ldr	r2, [pc, #16]	; (80007a4 <HAL_MspInit+0x60>)
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000796:	bf00      	nop
 8000798:	3714      	adds	r7, #20
 800079a:	46bd      	mov	sp, r7
 800079c:	bc80      	pop	{r7}
 800079e:	4770      	bx	lr
 80007a0:	40021000 	.word	0x40021000
 80007a4:	40010000 	.word	0x40010000

080007a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b088      	sub	sp, #32
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b0:	f107 0310 	add.w	r3, r7, #16
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]
 80007bc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	4a14      	ldr	r2, [pc, #80]	; (8000814 <HAL_ADC_MspInit+0x6c>)
 80007c4:	4293      	cmp	r3, r2
 80007c6:	d121      	bne.n	800080c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80007c8:	4b13      	ldr	r3, [pc, #76]	; (8000818 <HAL_ADC_MspInit+0x70>)
 80007ca:	699b      	ldr	r3, [r3, #24]
 80007cc:	4a12      	ldr	r2, [pc, #72]	; (8000818 <HAL_ADC_MspInit+0x70>)
 80007ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007d2:	6193      	str	r3, [r2, #24]
 80007d4:	4b10      	ldr	r3, [pc, #64]	; (8000818 <HAL_ADC_MspInit+0x70>)
 80007d6:	699b      	ldr	r3, [r3, #24]
 80007d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80007dc:	60fb      	str	r3, [r7, #12]
 80007de:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e0:	4b0d      	ldr	r3, [pc, #52]	; (8000818 <HAL_ADC_MspInit+0x70>)
 80007e2:	699b      	ldr	r3, [r3, #24]
 80007e4:	4a0c      	ldr	r2, [pc, #48]	; (8000818 <HAL_ADC_MspInit+0x70>)
 80007e6:	f043 0304 	orr.w	r3, r3, #4
 80007ea:	6193      	str	r3, [r2, #24]
 80007ec:	4b0a      	ldr	r3, [pc, #40]	; (8000818 <HAL_ADC_MspInit+0x70>)
 80007ee:	699b      	ldr	r3, [r3, #24]
 80007f0:	f003 0304 	and.w	r3, r3, #4
 80007f4:	60bb      	str	r3, [r7, #8]
 80007f6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007f8:	2301      	movs	r3, #1
 80007fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007fc:	2303      	movs	r3, #3
 80007fe:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000800:	f107 0310 	add.w	r3, r7, #16
 8000804:	4619      	mov	r1, r3
 8000806:	4805      	ldr	r0, [pc, #20]	; (800081c <HAL_ADC_MspInit+0x74>)
 8000808:	f000 ff8c 	bl	8001724 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800080c:	bf00      	nop
 800080e:	3720      	adds	r7, #32
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	40012400 	.word	0x40012400
 8000818:	40021000 	.word	0x40021000
 800081c:	40010800 	.word	0x40010800

08000820 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000820:	b480      	push	{r7}
 8000822:	b085      	sub	sp, #20
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a09      	ldr	r2, [pc, #36]	; (8000854 <HAL_TIM_PWM_MspInit+0x34>)
 800082e:	4293      	cmp	r3, r2
 8000830:	d10b      	bne.n	800084a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000832:	4b09      	ldr	r3, [pc, #36]	; (8000858 <HAL_TIM_PWM_MspInit+0x38>)
 8000834:	69db      	ldr	r3, [r3, #28]
 8000836:	4a08      	ldr	r2, [pc, #32]	; (8000858 <HAL_TIM_PWM_MspInit+0x38>)
 8000838:	f043 0302 	orr.w	r3, r3, #2
 800083c:	61d3      	str	r3, [r2, #28]
 800083e:	4b06      	ldr	r3, [pc, #24]	; (8000858 <HAL_TIM_PWM_MspInit+0x38>)
 8000840:	69db      	ldr	r3, [r3, #28]
 8000842:	f003 0302 	and.w	r3, r3, #2
 8000846:	60fb      	str	r3, [r7, #12]
 8000848:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800084a:	bf00      	nop
 800084c:	3714      	adds	r7, #20
 800084e:	46bd      	mov	sp, r7
 8000850:	bc80      	pop	{r7}
 8000852:	4770      	bx	lr
 8000854:	40000400 	.word	0x40000400
 8000858:	40021000 	.word	0x40021000

0800085c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b084      	sub	sp, #16
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a0d      	ldr	r2, [pc, #52]	; (80008a0 <HAL_TIM_Base_MspInit+0x44>)
 800086a:	4293      	cmp	r3, r2
 800086c:	d113      	bne.n	8000896 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800086e:	4b0d      	ldr	r3, [pc, #52]	; (80008a4 <HAL_TIM_Base_MspInit+0x48>)
 8000870:	69db      	ldr	r3, [r3, #28]
 8000872:	4a0c      	ldr	r2, [pc, #48]	; (80008a4 <HAL_TIM_Base_MspInit+0x48>)
 8000874:	f043 0304 	orr.w	r3, r3, #4
 8000878:	61d3      	str	r3, [r2, #28]
 800087a:	4b0a      	ldr	r3, [pc, #40]	; (80008a4 <HAL_TIM_Base_MspInit+0x48>)
 800087c:	69db      	ldr	r3, [r3, #28]
 800087e:	f003 0304 	and.w	r3, r3, #4
 8000882:	60fb      	str	r3, [r7, #12]
 8000884:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000886:	2200      	movs	r2, #0
 8000888:	2100      	movs	r1, #0
 800088a:	201e      	movs	r0, #30
 800088c:	f000 fe9d 	bl	80015ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000890:	201e      	movs	r0, #30
 8000892:	f000 feb6 	bl	8001602 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000896:	bf00      	nop
 8000898:	3710      	adds	r7, #16
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40000800 	.word	0x40000800
 80008a4:	40021000 	.word	0x40021000

080008a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b088      	sub	sp, #32
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b0:	f107 0310 	add.w	r3, r7, #16
 80008b4:	2200      	movs	r2, #0
 80008b6:	601a      	str	r2, [r3, #0]
 80008b8:	605a      	str	r2, [r3, #4]
 80008ba:	609a      	str	r2, [r3, #8]
 80008bc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	4a0f      	ldr	r2, [pc, #60]	; (8000900 <HAL_TIM_MspPostInit+0x58>)
 80008c4:	4293      	cmp	r3, r2
 80008c6:	d117      	bne.n	80008f8 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c8:	4b0e      	ldr	r3, [pc, #56]	; (8000904 <HAL_TIM_MspPostInit+0x5c>)
 80008ca:	699b      	ldr	r3, [r3, #24]
 80008cc:	4a0d      	ldr	r2, [pc, #52]	; (8000904 <HAL_TIM_MspPostInit+0x5c>)
 80008ce:	f043 0304 	orr.w	r3, r3, #4
 80008d2:	6193      	str	r3, [r2, #24]
 80008d4:	4b0b      	ldr	r3, [pc, #44]	; (8000904 <HAL_TIM_MspPostInit+0x5c>)
 80008d6:	699b      	ldr	r3, [r3, #24]
 80008d8:	f003 0304 	and.w	r3, r3, #4
 80008dc:	60fb      	str	r3, [r7, #12]
 80008de:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration    
    PA6     ------> TIM3_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80008e0:	2340      	movs	r3, #64	; 0x40
 80008e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e4:	2302      	movs	r3, #2
 80008e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e8:	2302      	movs	r3, #2
 80008ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ec:	f107 0310 	add.w	r3, r7, #16
 80008f0:	4619      	mov	r1, r3
 80008f2:	4805      	ldr	r0, [pc, #20]	; (8000908 <HAL_TIM_MspPostInit+0x60>)
 80008f4:	f000 ff16 	bl	8001724 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80008f8:	bf00      	nop
 80008fa:	3720      	adds	r7, #32
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	40000400 	.word	0x40000400
 8000904:	40021000 	.word	0x40021000
 8000908:	40010800 	.word	0x40010800

0800090c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b088      	sub	sp, #32
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000914:	f107 0310 	add.w	r3, r7, #16
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	605a      	str	r2, [r3, #4]
 800091e:	609a      	str	r2, [r3, #8]
 8000920:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	4a1f      	ldr	r2, [pc, #124]	; (80009a4 <HAL_UART_MspInit+0x98>)
 8000928:	4293      	cmp	r3, r2
 800092a:	d137      	bne.n	800099c <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800092c:	4b1e      	ldr	r3, [pc, #120]	; (80009a8 <HAL_UART_MspInit+0x9c>)
 800092e:	69db      	ldr	r3, [r3, #28]
 8000930:	4a1d      	ldr	r2, [pc, #116]	; (80009a8 <HAL_UART_MspInit+0x9c>)
 8000932:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000936:	61d3      	str	r3, [r2, #28]
 8000938:	4b1b      	ldr	r3, [pc, #108]	; (80009a8 <HAL_UART_MspInit+0x9c>)
 800093a:	69db      	ldr	r3, [r3, #28]
 800093c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000940:	60fb      	str	r3, [r7, #12]
 8000942:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000944:	4b18      	ldr	r3, [pc, #96]	; (80009a8 <HAL_UART_MspInit+0x9c>)
 8000946:	699b      	ldr	r3, [r3, #24]
 8000948:	4a17      	ldr	r2, [pc, #92]	; (80009a8 <HAL_UART_MspInit+0x9c>)
 800094a:	f043 0304 	orr.w	r3, r3, #4
 800094e:	6193      	str	r3, [r2, #24]
 8000950:	4b15      	ldr	r3, [pc, #84]	; (80009a8 <HAL_UART_MspInit+0x9c>)
 8000952:	699b      	ldr	r3, [r3, #24]
 8000954:	f003 0304 	and.w	r3, r3, #4
 8000958:	60bb      	str	r3, [r7, #8]
 800095a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800095c:	2304      	movs	r3, #4
 800095e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000960:	2302      	movs	r3, #2
 8000962:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000964:	2303      	movs	r3, #3
 8000966:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000968:	f107 0310 	add.w	r3, r7, #16
 800096c:	4619      	mov	r1, r3
 800096e:	480f      	ldr	r0, [pc, #60]	; (80009ac <HAL_UART_MspInit+0xa0>)
 8000970:	f000 fed8 	bl	8001724 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000974:	2308      	movs	r3, #8
 8000976:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000978:	2300      	movs	r3, #0
 800097a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000980:	f107 0310 	add.w	r3, r7, #16
 8000984:	4619      	mov	r1, r3
 8000986:	4809      	ldr	r0, [pc, #36]	; (80009ac <HAL_UART_MspInit+0xa0>)
 8000988:	f000 fecc 	bl	8001724 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800098c:	2200      	movs	r2, #0
 800098e:	2100      	movs	r1, #0
 8000990:	2026      	movs	r0, #38	; 0x26
 8000992:	f000 fe1a 	bl	80015ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000996:	2026      	movs	r0, #38	; 0x26
 8000998:	f000 fe33 	bl	8001602 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800099c:	bf00      	nop
 800099e:	3720      	adds	r7, #32
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	40004400 	.word	0x40004400
 80009a8:	40021000 	.word	0x40021000
 80009ac:	40010800 	.word	0x40010800

080009b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80009b4:	bf00      	nop
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bc80      	pop	{r7}
 80009ba:	4770      	bx	lr

080009bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009c0:	e7fe      	b.n	80009c0 <HardFault_Handler+0x4>

080009c2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009c2:	b480      	push	{r7}
 80009c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009c6:	e7fe      	b.n	80009c6 <MemManage_Handler+0x4>

080009c8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009cc:	e7fe      	b.n	80009cc <BusFault_Handler+0x4>

080009ce <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009ce:	b480      	push	{r7}
 80009d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009d2:	e7fe      	b.n	80009d2 <UsageFault_Handler+0x4>

080009d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009d8:	bf00      	nop
 80009da:	46bd      	mov	sp, r7
 80009dc:	bc80      	pop	{r7}
 80009de:	4770      	bx	lr

080009e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009e4:	bf00      	nop
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bc80      	pop	{r7}
 80009ea:	4770      	bx	lr

080009ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009f0:	bf00      	nop
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bc80      	pop	{r7}
 80009f6:	4770      	bx	lr

080009f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009fc:	f000 f8b6 	bl	8000b6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a00:	bf00      	nop
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000a08:	4802      	ldr	r0, [pc, #8]	; (8000a14 <TIM4_IRQHandler+0x10>)
 8000a0a:	f001 fe4f 	bl	80026ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	2000006c 	.word	0x2000006c

08000a18 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a1c:	4802      	ldr	r0, [pc, #8]	; (8000a28 <USART2_IRQHandler+0x10>)
 8000a1e:	f002 fd23 	bl	8003468 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a22:	bf00      	nop
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	2000012c 	.word	0x2000012c

08000a2c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000a30:	4b15      	ldr	r3, [pc, #84]	; (8000a88 <SystemInit+0x5c>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a14      	ldr	r2, [pc, #80]	; (8000a88 <SystemInit+0x5c>)
 8000a36:	f043 0301 	orr.w	r3, r3, #1
 8000a3a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000a3c:	4b12      	ldr	r3, [pc, #72]	; (8000a88 <SystemInit+0x5c>)
 8000a3e:	685a      	ldr	r2, [r3, #4]
 8000a40:	4911      	ldr	r1, [pc, #68]	; (8000a88 <SystemInit+0x5c>)
 8000a42:	4b12      	ldr	r3, [pc, #72]	; (8000a8c <SystemInit+0x60>)
 8000a44:	4013      	ands	r3, r2
 8000a46:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000a48:	4b0f      	ldr	r3, [pc, #60]	; (8000a88 <SystemInit+0x5c>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a0e      	ldr	r2, [pc, #56]	; (8000a88 <SystemInit+0x5c>)
 8000a4e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000a52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a56:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a58:	4b0b      	ldr	r3, [pc, #44]	; (8000a88 <SystemInit+0x5c>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a0a      	ldr	r2, [pc, #40]	; (8000a88 <SystemInit+0x5c>)
 8000a5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a62:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000a64:	4b08      	ldr	r3, [pc, #32]	; (8000a88 <SystemInit+0x5c>)
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	4a07      	ldr	r2, [pc, #28]	; (8000a88 <SystemInit+0x5c>)
 8000a6a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000a6e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000a70:	4b05      	ldr	r3, [pc, #20]	; (8000a88 <SystemInit+0x5c>)
 8000a72:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000a76:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000a78:	4b05      	ldr	r3, [pc, #20]	; (8000a90 <SystemInit+0x64>)
 8000a7a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a7e:	609a      	str	r2, [r3, #8]
#endif 
}
 8000a80:	bf00      	nop
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bc80      	pop	{r7}
 8000a86:	4770      	bx	lr
 8000a88:	40021000 	.word	0x40021000
 8000a8c:	f8ff0000 	.word	0xf8ff0000
 8000a90:	e000ed00 	.word	0xe000ed00

08000a94 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000a94:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000a96:	e003      	b.n	8000aa0 <LoopCopyDataInit>

08000a98 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000a98:	4b0b      	ldr	r3, [pc, #44]	; (8000ac8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000a9a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000a9c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000a9e:	3104      	adds	r1, #4

08000aa0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000aa0:	480a      	ldr	r0, [pc, #40]	; (8000acc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000aa2:	4b0b      	ldr	r3, [pc, #44]	; (8000ad0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000aa4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000aa6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000aa8:	d3f6      	bcc.n	8000a98 <CopyDataInit>
  ldr r2, =_sbss
 8000aaa:	4a0a      	ldr	r2, [pc, #40]	; (8000ad4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000aac:	e002      	b.n	8000ab4 <LoopFillZerobss>

08000aae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000aae:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000ab0:	f842 3b04 	str.w	r3, [r2], #4

08000ab4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000ab4:	4b08      	ldr	r3, [pc, #32]	; (8000ad8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000ab6:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000ab8:	d3f9      	bcc.n	8000aae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000aba:	f7ff ffb7 	bl	8000a2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000abe:	f003 f825 	bl	8003b0c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ac2:	f7ff fb65 	bl	8000190 <main>
  bx lr
 8000ac6:	4770      	bx	lr
  ldr r3, =_sidata
 8000ac8:	08003bc4 	.word	0x08003bc4
  ldr r0, =_sdata
 8000acc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000ad0:	20000034 	.word	0x20000034
  ldr r2, =_sbss
 8000ad4:	20000038 	.word	0x20000038
  ldr r3, = _ebss
 8000ad8:	20000170 	.word	0x20000170

08000adc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000adc:	e7fe      	b.n	8000adc <ADC1_2_IRQHandler>
	...

08000ae0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ae4:	4b08      	ldr	r3, [pc, #32]	; (8000b08 <HAL_Init+0x28>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a07      	ldr	r2, [pc, #28]	; (8000b08 <HAL_Init+0x28>)
 8000aea:	f043 0310 	orr.w	r3, r3, #16
 8000aee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000af0:	2003      	movs	r0, #3
 8000af2:	f000 fd5f 	bl	80015b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000af6:	2000      	movs	r0, #0
 8000af8:	f000 f808 	bl	8000b0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000afc:	f7ff fe22 	bl	8000744 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b00:	2300      	movs	r3, #0
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	40022000 	.word	0x40022000

08000b0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b14:	4b12      	ldr	r3, [pc, #72]	; (8000b60 <HAL_InitTick+0x54>)
 8000b16:	681a      	ldr	r2, [r3, #0]
 8000b18:	4b12      	ldr	r3, [pc, #72]	; (8000b64 <HAL_InitTick+0x58>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f000 fd77 	bl	800161e <HAL_SYSTICK_Config>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b36:	2301      	movs	r3, #1
 8000b38:	e00e      	b.n	8000b58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	2b0f      	cmp	r3, #15
 8000b3e:	d80a      	bhi.n	8000b56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b40:	2200      	movs	r2, #0
 8000b42:	6879      	ldr	r1, [r7, #4]
 8000b44:	f04f 30ff 	mov.w	r0, #4294967295
 8000b48:	f000 fd3f 	bl	80015ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b4c:	4a06      	ldr	r2, [pc, #24]	; (8000b68 <HAL_InitTick+0x5c>)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b52:	2300      	movs	r3, #0
 8000b54:	e000      	b.n	8000b58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b56:	2301      	movs	r3, #1
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	3708      	adds	r7, #8
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	20000028 	.word	0x20000028
 8000b64:	20000030 	.word	0x20000030
 8000b68:	2000002c 	.word	0x2000002c

08000b6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b70:	4b05      	ldr	r3, [pc, #20]	; (8000b88 <HAL_IncTick+0x1c>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	461a      	mov	r2, r3
 8000b76:	4b05      	ldr	r3, [pc, #20]	; (8000b8c <HAL_IncTick+0x20>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4413      	add	r3, r2
 8000b7c:	4a03      	ldr	r2, [pc, #12]	; (8000b8c <HAL_IncTick+0x20>)
 8000b7e:	6013      	str	r3, [r2, #0]
}
 8000b80:	bf00      	nop
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bc80      	pop	{r7}
 8000b86:	4770      	bx	lr
 8000b88:	20000030 	.word	0x20000030
 8000b8c:	2000016c 	.word	0x2000016c

08000b90 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  return uwTick;
 8000b94:	4b02      	ldr	r3, [pc, #8]	; (8000ba0 <HAL_GetTick+0x10>)
 8000b96:	681b      	ldr	r3, [r3, #0]
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bc80      	pop	{r7}
 8000b9e:	4770      	bx	lr
 8000ba0:	2000016c 	.word	0x2000016c

08000ba4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b086      	sub	sp, #24
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000bac:	2300      	movs	r3, #0
 8000bae:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d101      	bne.n	8000bc6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	e0be      	b.n	8000d44 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	689b      	ldr	r3, [r3, #8]
 8000bca:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d109      	bne.n	8000be8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2200      	movs	r2, #0
 8000bde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000be2:	6878      	ldr	r0, [r7, #4]
 8000be4:	f7ff fde0 	bl	80007a8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000be8:	6878      	ldr	r0, [r7, #4]
 8000bea:	f000 fbdd 	bl	80013a8 <ADC_ConversionStop_Disable>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bf6:	f003 0310 	and.w	r3, r3, #16
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	f040 8099 	bne.w	8000d32 <HAL_ADC_Init+0x18e>
 8000c00:	7dfb      	ldrb	r3, [r7, #23]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	f040 8095 	bne.w	8000d32 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c0c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000c10:	f023 0302 	bic.w	r3, r3, #2
 8000c14:	f043 0202 	orr.w	r2, r3, #2
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c24:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	7b1b      	ldrb	r3, [r3, #12]
 8000c2a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000c2c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c2e:	68ba      	ldr	r2, [r7, #8]
 8000c30:	4313      	orrs	r3, r2
 8000c32:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	689b      	ldr	r3, [r3, #8]
 8000c38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c3c:	d003      	beq.n	8000c46 <HAL_ADC_Init+0xa2>
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	689b      	ldr	r3, [r3, #8]
 8000c42:	2b01      	cmp	r3, #1
 8000c44:	d102      	bne.n	8000c4c <HAL_ADC_Init+0xa8>
 8000c46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c4a:	e000      	b.n	8000c4e <HAL_ADC_Init+0xaa>
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	693a      	ldr	r2, [r7, #16]
 8000c50:	4313      	orrs	r3, r2
 8000c52:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	7d1b      	ldrb	r3, [r3, #20]
 8000c58:	2b01      	cmp	r3, #1
 8000c5a:	d119      	bne.n	8000c90 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	7b1b      	ldrb	r3, [r3, #12]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d109      	bne.n	8000c78 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	699b      	ldr	r3, [r3, #24]
 8000c68:	3b01      	subs	r3, #1
 8000c6a:	035a      	lsls	r2, r3, #13
 8000c6c:	693b      	ldr	r3, [r7, #16]
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c74:	613b      	str	r3, [r7, #16]
 8000c76:	e00b      	b.n	8000c90 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c7c:	f043 0220 	orr.w	r2, r3, #32
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c88:	f043 0201 	orr.w	r2, r3, #1
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	693a      	ldr	r2, [r7, #16]
 8000ca0:	430a      	orrs	r2, r1
 8000ca2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	689a      	ldr	r2, [r3, #8]
 8000caa:	4b28      	ldr	r3, [pc, #160]	; (8000d4c <HAL_ADC_Init+0x1a8>)
 8000cac:	4013      	ands	r3, r2
 8000cae:	687a      	ldr	r2, [r7, #4]
 8000cb0:	6812      	ldr	r2, [r2, #0]
 8000cb2:	68b9      	ldr	r1, [r7, #8]
 8000cb4:	430b      	orrs	r3, r1
 8000cb6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	689b      	ldr	r3, [r3, #8]
 8000cbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000cc0:	d003      	beq.n	8000cca <HAL_ADC_Init+0x126>
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	689b      	ldr	r3, [r3, #8]
 8000cc6:	2b01      	cmp	r3, #1
 8000cc8:	d104      	bne.n	8000cd4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	691b      	ldr	r3, [r3, #16]
 8000cce:	3b01      	subs	r3, #1
 8000cd0:	051b      	lsls	r3, r3, #20
 8000cd2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cda:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	68fa      	ldr	r2, [r7, #12]
 8000ce4:	430a      	orrs	r2, r1
 8000ce6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	689a      	ldr	r2, [r3, #8]
 8000cee:	4b18      	ldr	r3, [pc, #96]	; (8000d50 <HAL_ADC_Init+0x1ac>)
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	68ba      	ldr	r2, [r7, #8]
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	d10b      	bne.n	8000d10 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d02:	f023 0303 	bic.w	r3, r3, #3
 8000d06:	f043 0201 	orr.w	r2, r3, #1
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d0e:	e018      	b.n	8000d42 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d14:	f023 0312 	bic.w	r3, r3, #18
 8000d18:	f043 0210 	orr.w	r2, r3, #16
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d24:	f043 0201 	orr.w	r2, r3, #1
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d30:	e007      	b.n	8000d42 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d36:	f043 0210 	orr.w	r2, r3, #16
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000d42:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	3718      	adds	r7, #24
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	ffe1f7fd 	.word	0xffe1f7fd
 8000d50:	ff1f0efe 	.word	0xff1f0efe

08000d54 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000d66:	2b01      	cmp	r3, #1
 8000d68:	d101      	bne.n	8000d6e <HAL_ADC_Start+0x1a>
 8000d6a:	2302      	movs	r3, #2
 8000d6c:	e098      	b.n	8000ea0 <HAL_ADC_Start+0x14c>
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2201      	movs	r2, #1
 8000d72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000d76:	6878      	ldr	r0, [r7, #4]
 8000d78:	f000 fac4 	bl	8001304 <ADC_Enable>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000d80:	7bfb      	ldrb	r3, [r7, #15]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	f040 8087 	bne.w	8000e96 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000d90:	f023 0301 	bic.w	r3, r3, #1
 8000d94:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a41      	ldr	r2, [pc, #260]	; (8000ea8 <HAL_ADC_Start+0x154>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d105      	bne.n	8000db2 <HAL_ADC_Start+0x5e>
 8000da6:	4b41      	ldr	r3, [pc, #260]	; (8000eac <HAL_ADC_Start+0x158>)
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d115      	bne.n	8000dde <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000db6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d026      	beq.n	8000e1a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dd0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000dd4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000ddc:	e01d      	b.n	8000e1a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000de2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4a2f      	ldr	r2, [pc, #188]	; (8000eac <HAL_ADC_Start+0x158>)
 8000df0:	4293      	cmp	r3, r2
 8000df2:	d004      	beq.n	8000dfe <HAL_ADC_Start+0xaa>
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a2b      	ldr	r2, [pc, #172]	; (8000ea8 <HAL_ADC_Start+0x154>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d10d      	bne.n	8000e1a <HAL_ADC_Start+0xc6>
 8000dfe:	4b2b      	ldr	r3, [pc, #172]	; (8000eac <HAL_ADC_Start+0x158>)
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d007      	beq.n	8000e1a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e0e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000e12:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d006      	beq.n	8000e34 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e2a:	f023 0206 	bic.w	r2, r3, #6
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e32:	e002      	b.n	8000e3a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2200      	movs	r2, #0
 8000e38:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f06f 0202 	mvn.w	r2, #2
 8000e4a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	689b      	ldr	r3, [r3, #8]
 8000e52:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000e56:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000e5a:	d113      	bne.n	8000e84 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000e60:	4a11      	ldr	r2, [pc, #68]	; (8000ea8 <HAL_ADC_Start+0x154>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d105      	bne.n	8000e72 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000e66:	4b11      	ldr	r3, [pc, #68]	; (8000eac <HAL_ADC_Start+0x158>)
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d108      	bne.n	8000e84 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	689a      	ldr	r2, [r3, #8]
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000e80:	609a      	str	r2, [r3, #8]
 8000e82:	e00c      	b.n	8000e9e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	689a      	ldr	r2, [r3, #8]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000e92:	609a      	str	r2, [r3, #8]
 8000e94:	e003      	b.n	8000e9e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2200      	movs	r2, #0
 8000e9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000e9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	3710      	adds	r7, #16
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	40012800 	.word	0x40012800
 8000eac:	40012400 	.word	0x40012400

08000eb0 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000ec2:	2b01      	cmp	r3, #1
 8000ec4:	d101      	bne.n	8000eca <HAL_ADC_Stop+0x1a>
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	e01a      	b.n	8000f00 <HAL_ADC_Stop+0x50>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2201      	movs	r2, #1
 8000ece:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	f000 fa68 	bl	80013a8 <ADC_ConversionStop_Disable>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8000edc:	7bfb      	ldrb	r3, [r7, #15]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d109      	bne.n	8000ef6 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ee6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000eea:	f023 0301 	bic.w	r3, r3, #1
 8000eee:	f043 0201 	orr.w	r2, r3, #1
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2200      	movs	r2, #0
 8000efa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000efe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3710      	adds	r7, #16
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000f08:	b590      	push	{r4, r7, lr}
 8000f0a:	b087      	sub	sp, #28
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000f12:	2300      	movs	r3, #0
 8000f14:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000f16:	2300      	movs	r3, #0
 8000f18:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000f1e:	f7ff fe37 	bl	8000b90 <HAL_GetTick>
 8000f22:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	689b      	ldr	r3, [r3, #8]
 8000f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d00b      	beq.n	8000f4a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f36:	f043 0220 	orr.w	r2, r3, #32
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2200      	movs	r2, #0
 8000f42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8000f46:	2301      	movs	r3, #1
 8000f48:	e0c8      	b.n	80010dc <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d12a      	bne.n	8000fae <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f5e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d123      	bne.n	8000fae <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000f66:	e01a      	b.n	8000f9e <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f6e:	d016      	beq.n	8000f9e <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d007      	beq.n	8000f86 <HAL_ADC_PollForConversion+0x7e>
 8000f76:	f7ff fe0b 	bl	8000b90 <HAL_GetTick>
 8000f7a:	4602      	mov	r2, r0
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	1ad3      	subs	r3, r2, r3
 8000f80:	683a      	ldr	r2, [r7, #0]
 8000f82:	429a      	cmp	r2, r3
 8000f84:	d20b      	bcs.n	8000f9e <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f8a:	f043 0204 	orr.w	r2, r3, #4
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2200      	movs	r2, #0
 8000f96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8000f9a:	2303      	movs	r3, #3
 8000f9c:	e09e      	b.n	80010dc <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f003 0302 	and.w	r3, r3, #2
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d0dd      	beq.n	8000f68 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000fac:	e06c      	b.n	8001088 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000fae:	4b4d      	ldr	r3, [pc, #308]	; (80010e4 <HAL_ADC_PollForConversion+0x1dc>)
 8000fb0:	681c      	ldr	r4, [r3, #0]
 8000fb2:	2002      	movs	r0, #2
 8000fb4:	f001 fa12 	bl	80023dc <HAL_RCCEx_GetPeriphCLKFreq>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	6919      	ldr	r1, [r3, #16]
 8000fc4:	4b48      	ldr	r3, [pc, #288]	; (80010e8 <HAL_ADC_PollForConversion+0x1e0>)
 8000fc6:	400b      	ands	r3, r1
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d118      	bne.n	8000ffe <HAL_ADC_PollForConversion+0xf6>
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	68d9      	ldr	r1, [r3, #12]
 8000fd2:	4b46      	ldr	r3, [pc, #280]	; (80010ec <HAL_ADC_PollForConversion+0x1e4>)
 8000fd4:	400b      	ands	r3, r1
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d111      	bne.n	8000ffe <HAL_ADC_PollForConversion+0xf6>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	6919      	ldr	r1, [r3, #16]
 8000fe0:	4b43      	ldr	r3, [pc, #268]	; (80010f0 <HAL_ADC_PollForConversion+0x1e8>)
 8000fe2:	400b      	ands	r3, r1
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d108      	bne.n	8000ffa <HAL_ADC_PollForConversion+0xf2>
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	68d9      	ldr	r1, [r3, #12]
 8000fee:	4b41      	ldr	r3, [pc, #260]	; (80010f4 <HAL_ADC_PollForConversion+0x1ec>)
 8000ff0:	400b      	ands	r3, r1
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d101      	bne.n	8000ffa <HAL_ADC_PollForConversion+0xf2>
 8000ff6:	2314      	movs	r3, #20
 8000ff8:	e020      	b.n	800103c <HAL_ADC_PollForConversion+0x134>
 8000ffa:	2329      	movs	r3, #41	; 0x29
 8000ffc:	e01e      	b.n	800103c <HAL_ADC_PollForConversion+0x134>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	6919      	ldr	r1, [r3, #16]
 8001004:	4b3a      	ldr	r3, [pc, #232]	; (80010f0 <HAL_ADC_PollForConversion+0x1e8>)
 8001006:	400b      	ands	r3, r1
 8001008:	2b00      	cmp	r3, #0
 800100a:	d106      	bne.n	800101a <HAL_ADC_PollForConversion+0x112>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	68d9      	ldr	r1, [r3, #12]
 8001012:	4b38      	ldr	r3, [pc, #224]	; (80010f4 <HAL_ADC_PollForConversion+0x1ec>)
 8001014:	400b      	ands	r3, r1
 8001016:	2b00      	cmp	r3, #0
 8001018:	d00d      	beq.n	8001036 <HAL_ADC_PollForConversion+0x12e>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	6919      	ldr	r1, [r3, #16]
 8001020:	4b35      	ldr	r3, [pc, #212]	; (80010f8 <HAL_ADC_PollForConversion+0x1f0>)
 8001022:	400b      	ands	r3, r1
 8001024:	2b00      	cmp	r3, #0
 8001026:	d108      	bne.n	800103a <HAL_ADC_PollForConversion+0x132>
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	68d9      	ldr	r1, [r3, #12]
 800102e:	4b32      	ldr	r3, [pc, #200]	; (80010f8 <HAL_ADC_PollForConversion+0x1f0>)
 8001030:	400b      	ands	r3, r1
 8001032:	2b00      	cmp	r3, #0
 8001034:	d101      	bne.n	800103a <HAL_ADC_PollForConversion+0x132>
 8001036:	2354      	movs	r3, #84	; 0x54
 8001038:	e000      	b.n	800103c <HAL_ADC_PollForConversion+0x134>
 800103a:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800103c:	fb02 f303 	mul.w	r3, r2, r3
 8001040:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001042:	e01d      	b.n	8001080 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800104a:	d016      	beq.n	800107a <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d007      	beq.n	8001062 <HAL_ADC_PollForConversion+0x15a>
 8001052:	f7ff fd9d 	bl	8000b90 <HAL_GetTick>
 8001056:	4602      	mov	r2, r0
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	1ad3      	subs	r3, r2, r3
 800105c:	683a      	ldr	r2, [r7, #0]
 800105e:	429a      	cmp	r2, r3
 8001060:	d20b      	bcs.n	800107a <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001066:	f043 0204 	orr.w	r2, r3, #4
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2200      	movs	r2, #0
 8001072:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8001076:	2303      	movs	r3, #3
 8001078:	e030      	b.n	80010dc <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	3301      	adds	r3, #1
 800107e:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	693a      	ldr	r2, [r7, #16]
 8001084:	429a      	cmp	r2, r3
 8001086:	d8dd      	bhi.n	8001044 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f06f 0212 	mvn.w	r2, #18
 8001090:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001096:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	689b      	ldr	r3, [r3, #8]
 80010a4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80010a8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80010ac:	d115      	bne.n	80010da <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d111      	bne.n	80010da <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d105      	bne.n	80010da <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010d2:	f043 0201 	orr.w	r2, r3, #1
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80010da:	2300      	movs	r3, #0
}
 80010dc:	4618      	mov	r0, r3
 80010de:	371c      	adds	r7, #28
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd90      	pop	{r4, r7, pc}
 80010e4:	20000028 	.word	0x20000028
 80010e8:	24924924 	.word	0x24924924
 80010ec:	00924924 	.word	0x00924924
 80010f0:	12492492 	.word	0x12492492
 80010f4:	00492492 	.word	0x00492492
 80010f8:	00249249 	.word	0x00249249

080010fc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800110a:	4618      	mov	r0, r3
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	bc80      	pop	{r7}
 8001112:	4770      	bx	lr

08001114 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001114:	b480      	push	{r7}
 8001116:	b085      	sub	sp, #20
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800111e:	2300      	movs	r3, #0
 8001120:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001122:	2300      	movs	r3, #0
 8001124:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800112c:	2b01      	cmp	r3, #1
 800112e:	d101      	bne.n	8001134 <HAL_ADC_ConfigChannel+0x20>
 8001130:	2302      	movs	r3, #2
 8001132:	e0dc      	b.n	80012ee <HAL_ADC_ConfigChannel+0x1da>
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2201      	movs	r2, #1
 8001138:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	2b06      	cmp	r3, #6
 8001142:	d81c      	bhi.n	800117e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	685a      	ldr	r2, [r3, #4]
 800114e:	4613      	mov	r3, r2
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	4413      	add	r3, r2
 8001154:	3b05      	subs	r3, #5
 8001156:	221f      	movs	r2, #31
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	43db      	mvns	r3, r3
 800115e:	4019      	ands	r1, r3
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	6818      	ldr	r0, [r3, #0]
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685a      	ldr	r2, [r3, #4]
 8001168:	4613      	mov	r3, r2
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	4413      	add	r3, r2
 800116e:	3b05      	subs	r3, #5
 8001170:	fa00 f203 	lsl.w	r2, r0, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	430a      	orrs	r2, r1
 800117a:	635a      	str	r2, [r3, #52]	; 0x34
 800117c:	e03c      	b.n	80011f8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	2b0c      	cmp	r3, #12
 8001184:	d81c      	bhi.n	80011c0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685a      	ldr	r2, [r3, #4]
 8001190:	4613      	mov	r3, r2
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	4413      	add	r3, r2
 8001196:	3b23      	subs	r3, #35	; 0x23
 8001198:	221f      	movs	r2, #31
 800119a:	fa02 f303 	lsl.w	r3, r2, r3
 800119e:	43db      	mvns	r3, r3
 80011a0:	4019      	ands	r1, r3
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	6818      	ldr	r0, [r3, #0]
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685a      	ldr	r2, [r3, #4]
 80011aa:	4613      	mov	r3, r2
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	4413      	add	r3, r2
 80011b0:	3b23      	subs	r3, #35	; 0x23
 80011b2:	fa00 f203 	lsl.w	r2, r0, r3
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	430a      	orrs	r2, r1
 80011bc:	631a      	str	r2, [r3, #48]	; 0x30
 80011be:	e01b      	b.n	80011f8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685a      	ldr	r2, [r3, #4]
 80011ca:	4613      	mov	r3, r2
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	4413      	add	r3, r2
 80011d0:	3b41      	subs	r3, #65	; 0x41
 80011d2:	221f      	movs	r2, #31
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	43db      	mvns	r3, r3
 80011da:	4019      	ands	r1, r3
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	6818      	ldr	r0, [r3, #0]
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685a      	ldr	r2, [r3, #4]
 80011e4:	4613      	mov	r3, r2
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	4413      	add	r3, r2
 80011ea:	3b41      	subs	r3, #65	; 0x41
 80011ec:	fa00 f203 	lsl.w	r2, r0, r3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	430a      	orrs	r2, r1
 80011f6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	2b09      	cmp	r3, #9
 80011fe:	d91c      	bls.n	800123a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	68d9      	ldr	r1, [r3, #12]
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	4613      	mov	r3, r2
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	4413      	add	r3, r2
 8001210:	3b1e      	subs	r3, #30
 8001212:	2207      	movs	r2, #7
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	43db      	mvns	r3, r3
 800121a:	4019      	ands	r1, r3
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	6898      	ldr	r0, [r3, #8]
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	4613      	mov	r3, r2
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	4413      	add	r3, r2
 800122a:	3b1e      	subs	r3, #30
 800122c:	fa00 f203 	lsl.w	r2, r0, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	430a      	orrs	r2, r1
 8001236:	60da      	str	r2, [r3, #12]
 8001238:	e019      	b.n	800126e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	6919      	ldr	r1, [r3, #16]
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	4613      	mov	r3, r2
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	4413      	add	r3, r2
 800124a:	2207      	movs	r2, #7
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	43db      	mvns	r3, r3
 8001252:	4019      	ands	r1, r3
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	6898      	ldr	r0, [r3, #8]
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	4613      	mov	r3, r2
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	4413      	add	r3, r2
 8001262:	fa00 f203 	lsl.w	r2, r0, r3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	430a      	orrs	r2, r1
 800126c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	2b10      	cmp	r3, #16
 8001274:	d003      	beq.n	800127e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800127a:	2b11      	cmp	r3, #17
 800127c:	d132      	bne.n	80012e4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a1d      	ldr	r2, [pc, #116]	; (80012f8 <HAL_ADC_ConfigChannel+0x1e4>)
 8001284:	4293      	cmp	r3, r2
 8001286:	d125      	bne.n	80012d4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001292:	2b00      	cmp	r3, #0
 8001294:	d126      	bne.n	80012e4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	689a      	ldr	r2, [r3, #8]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80012a4:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	2b10      	cmp	r3, #16
 80012ac:	d11a      	bne.n	80012e4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80012ae:	4b13      	ldr	r3, [pc, #76]	; (80012fc <HAL_ADC_ConfigChannel+0x1e8>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a13      	ldr	r2, [pc, #76]	; (8001300 <HAL_ADC_ConfigChannel+0x1ec>)
 80012b4:	fba2 2303 	umull	r2, r3, r2, r3
 80012b8:	0c9a      	lsrs	r2, r3, #18
 80012ba:	4613      	mov	r3, r2
 80012bc:	009b      	lsls	r3, r3, #2
 80012be:	4413      	add	r3, r2
 80012c0:	005b      	lsls	r3, r3, #1
 80012c2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80012c4:	e002      	b.n	80012cc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	3b01      	subs	r3, #1
 80012ca:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d1f9      	bne.n	80012c6 <HAL_ADC_ConfigChannel+0x1b2>
 80012d2:	e007      	b.n	80012e4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012d8:	f043 0220 	orr.w	r2, r3, #32
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80012e0:	2301      	movs	r3, #1
 80012e2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2200      	movs	r2, #0
 80012e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80012ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3714      	adds	r7, #20
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bc80      	pop	{r7}
 80012f6:	4770      	bx	lr
 80012f8:	40012400 	.word	0x40012400
 80012fc:	20000028 	.word	0x20000028
 8001300:	431bde83 	.word	0x431bde83

08001304 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800130c:	2300      	movs	r3, #0
 800130e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001310:	2300      	movs	r3, #0
 8001312:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	f003 0301 	and.w	r3, r3, #1
 800131e:	2b01      	cmp	r3, #1
 8001320:	d039      	beq.n	8001396 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	689a      	ldr	r2, [r3, #8]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f042 0201 	orr.w	r2, r2, #1
 8001330:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001332:	4b1b      	ldr	r3, [pc, #108]	; (80013a0 <ADC_Enable+0x9c>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a1b      	ldr	r2, [pc, #108]	; (80013a4 <ADC_Enable+0xa0>)
 8001338:	fba2 2303 	umull	r2, r3, r2, r3
 800133c:	0c9b      	lsrs	r3, r3, #18
 800133e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001340:	e002      	b.n	8001348 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	3b01      	subs	r3, #1
 8001346:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d1f9      	bne.n	8001342 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800134e:	f7ff fc1f 	bl	8000b90 <HAL_GetTick>
 8001352:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001354:	e018      	b.n	8001388 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001356:	f7ff fc1b 	bl	8000b90 <HAL_GetTick>
 800135a:	4602      	mov	r2, r0
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	1ad3      	subs	r3, r2, r3
 8001360:	2b02      	cmp	r3, #2
 8001362:	d911      	bls.n	8001388 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001368:	f043 0210 	orr.w	r2, r3, #16
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001374:	f043 0201 	orr.w	r2, r3, #1
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2200      	movs	r2, #0
 8001380:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8001384:	2301      	movs	r3, #1
 8001386:	e007      	b.n	8001398 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	f003 0301 	and.w	r3, r3, #1
 8001392:	2b01      	cmp	r3, #1
 8001394:	d1df      	bne.n	8001356 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001396:	2300      	movs	r3, #0
}
 8001398:	4618      	mov	r0, r3
 800139a:	3710      	adds	r7, #16
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	20000028 	.word	0x20000028
 80013a4:	431bde83 	.word	0x431bde83

080013a8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80013b0:	2300      	movs	r3, #0
 80013b2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d127      	bne.n	8001412 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	689a      	ldr	r2, [r3, #8]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f022 0201 	bic.w	r2, r2, #1
 80013d0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80013d2:	f7ff fbdd 	bl	8000b90 <HAL_GetTick>
 80013d6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80013d8:	e014      	b.n	8001404 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80013da:	f7ff fbd9 	bl	8000b90 <HAL_GetTick>
 80013de:	4602      	mov	r2, r0
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	1ad3      	subs	r3, r2, r3
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	d90d      	bls.n	8001404 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ec:	f043 0210 	orr.w	r2, r3, #16
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013f8:	f043 0201 	orr.w	r2, r3, #1
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	e007      	b.n	8001414 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	f003 0301 	and.w	r3, r3, #1
 800140e:	2b01      	cmp	r3, #1
 8001410:	d0e3      	beq.n	80013da <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001412:	2300      	movs	r3, #0
}
 8001414:	4618      	mov	r0, r3
 8001416:	3710      	adds	r7, #16
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}

0800141c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800141c:	b480      	push	{r7}
 800141e:	b085      	sub	sp, #20
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	f003 0307 	and.w	r3, r3, #7
 800142a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800142c:	4b0c      	ldr	r3, [pc, #48]	; (8001460 <__NVIC_SetPriorityGrouping+0x44>)
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001432:	68ba      	ldr	r2, [r7, #8]
 8001434:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001438:	4013      	ands	r3, r2
 800143a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001444:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001448:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800144c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800144e:	4a04      	ldr	r2, [pc, #16]	; (8001460 <__NVIC_SetPriorityGrouping+0x44>)
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	60d3      	str	r3, [r2, #12]
}
 8001454:	bf00      	nop
 8001456:	3714      	adds	r7, #20
 8001458:	46bd      	mov	sp, r7
 800145a:	bc80      	pop	{r7}
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	e000ed00 	.word	0xe000ed00

08001464 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001468:	4b04      	ldr	r3, [pc, #16]	; (800147c <__NVIC_GetPriorityGrouping+0x18>)
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	0a1b      	lsrs	r3, r3, #8
 800146e:	f003 0307 	and.w	r3, r3, #7
}
 8001472:	4618      	mov	r0, r3
 8001474:	46bd      	mov	sp, r7
 8001476:	bc80      	pop	{r7}
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	e000ed00 	.word	0xe000ed00

08001480 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	4603      	mov	r3, r0
 8001488:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800148a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148e:	2b00      	cmp	r3, #0
 8001490:	db0b      	blt.n	80014aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001492:	79fb      	ldrb	r3, [r7, #7]
 8001494:	f003 021f 	and.w	r2, r3, #31
 8001498:	4906      	ldr	r1, [pc, #24]	; (80014b4 <__NVIC_EnableIRQ+0x34>)
 800149a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149e:	095b      	lsrs	r3, r3, #5
 80014a0:	2001      	movs	r0, #1
 80014a2:	fa00 f202 	lsl.w	r2, r0, r2
 80014a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014aa:	bf00      	nop
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bc80      	pop	{r7}
 80014b2:	4770      	bx	lr
 80014b4:	e000e100 	.word	0xe000e100

080014b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	4603      	mov	r3, r0
 80014c0:	6039      	str	r1, [r7, #0]
 80014c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	db0a      	blt.n	80014e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	b2da      	uxtb	r2, r3
 80014d0:	490c      	ldr	r1, [pc, #48]	; (8001504 <__NVIC_SetPriority+0x4c>)
 80014d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d6:	0112      	lsls	r2, r2, #4
 80014d8:	b2d2      	uxtb	r2, r2
 80014da:	440b      	add	r3, r1
 80014dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014e0:	e00a      	b.n	80014f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	b2da      	uxtb	r2, r3
 80014e6:	4908      	ldr	r1, [pc, #32]	; (8001508 <__NVIC_SetPriority+0x50>)
 80014e8:	79fb      	ldrb	r3, [r7, #7]
 80014ea:	f003 030f 	and.w	r3, r3, #15
 80014ee:	3b04      	subs	r3, #4
 80014f0:	0112      	lsls	r2, r2, #4
 80014f2:	b2d2      	uxtb	r2, r2
 80014f4:	440b      	add	r3, r1
 80014f6:	761a      	strb	r2, [r3, #24]
}
 80014f8:	bf00      	nop
 80014fa:	370c      	adds	r7, #12
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bc80      	pop	{r7}
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	e000e100 	.word	0xe000e100
 8001508:	e000ed00 	.word	0xe000ed00

0800150c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800150c:	b480      	push	{r7}
 800150e:	b089      	sub	sp, #36	; 0x24
 8001510:	af00      	add	r7, sp, #0
 8001512:	60f8      	str	r0, [r7, #12]
 8001514:	60b9      	str	r1, [r7, #8]
 8001516:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	f003 0307 	and.w	r3, r3, #7
 800151e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	f1c3 0307 	rsb	r3, r3, #7
 8001526:	2b04      	cmp	r3, #4
 8001528:	bf28      	it	cs
 800152a:	2304      	movcs	r3, #4
 800152c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	3304      	adds	r3, #4
 8001532:	2b06      	cmp	r3, #6
 8001534:	d902      	bls.n	800153c <NVIC_EncodePriority+0x30>
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	3b03      	subs	r3, #3
 800153a:	e000      	b.n	800153e <NVIC_EncodePriority+0x32>
 800153c:	2300      	movs	r3, #0
 800153e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001540:	f04f 32ff 	mov.w	r2, #4294967295
 8001544:	69bb      	ldr	r3, [r7, #24]
 8001546:	fa02 f303 	lsl.w	r3, r2, r3
 800154a:	43da      	mvns	r2, r3
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	401a      	ands	r2, r3
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001554:	f04f 31ff 	mov.w	r1, #4294967295
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	fa01 f303 	lsl.w	r3, r1, r3
 800155e:	43d9      	mvns	r1, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001564:	4313      	orrs	r3, r2
         );
}
 8001566:	4618      	mov	r0, r3
 8001568:	3724      	adds	r7, #36	; 0x24
 800156a:	46bd      	mov	sp, r7
 800156c:	bc80      	pop	{r7}
 800156e:	4770      	bx	lr

08001570 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	3b01      	subs	r3, #1
 800157c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001580:	d301      	bcc.n	8001586 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001582:	2301      	movs	r3, #1
 8001584:	e00f      	b.n	80015a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001586:	4a0a      	ldr	r2, [pc, #40]	; (80015b0 <SysTick_Config+0x40>)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	3b01      	subs	r3, #1
 800158c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800158e:	210f      	movs	r1, #15
 8001590:	f04f 30ff 	mov.w	r0, #4294967295
 8001594:	f7ff ff90 	bl	80014b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001598:	4b05      	ldr	r3, [pc, #20]	; (80015b0 <SysTick_Config+0x40>)
 800159a:	2200      	movs	r2, #0
 800159c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800159e:	4b04      	ldr	r3, [pc, #16]	; (80015b0 <SysTick_Config+0x40>)
 80015a0:	2207      	movs	r2, #7
 80015a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015a4:	2300      	movs	r3, #0
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	e000e010 	.word	0xe000e010

080015b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f7ff ff2d 	bl	800141c <__NVIC_SetPriorityGrouping>
}
 80015c2:	bf00      	nop
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}

080015ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b086      	sub	sp, #24
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	4603      	mov	r3, r0
 80015d2:	60b9      	str	r1, [r7, #8]
 80015d4:	607a      	str	r2, [r7, #4]
 80015d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015d8:	2300      	movs	r3, #0
 80015da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015dc:	f7ff ff42 	bl	8001464 <__NVIC_GetPriorityGrouping>
 80015e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015e2:	687a      	ldr	r2, [r7, #4]
 80015e4:	68b9      	ldr	r1, [r7, #8]
 80015e6:	6978      	ldr	r0, [r7, #20]
 80015e8:	f7ff ff90 	bl	800150c <NVIC_EncodePriority>
 80015ec:	4602      	mov	r2, r0
 80015ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015f2:	4611      	mov	r1, r2
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7ff ff5f 	bl	80014b8 <__NVIC_SetPriority>
}
 80015fa:	bf00      	nop
 80015fc:	3718      	adds	r7, #24
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001602:	b580      	push	{r7, lr}
 8001604:	b082      	sub	sp, #8
 8001606:	af00      	add	r7, sp, #0
 8001608:	4603      	mov	r3, r0
 800160a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800160c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff ff35 	bl	8001480 <__NVIC_EnableIRQ>
}
 8001616:	bf00      	nop
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}

0800161e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800161e:	b580      	push	{r7, lr}
 8001620:	b082      	sub	sp, #8
 8001622:	af00      	add	r7, sp, #0
 8001624:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f7ff ffa2 	bl	8001570 <SysTick_Config>
 800162c:	4603      	mov	r3, r0
}
 800162e:	4618      	mov	r0, r3
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
	...

08001638 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001640:	2300      	movs	r3, #0
 8001642:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800164a:	2b02      	cmp	r3, #2
 800164c:	d005      	beq.n	800165a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2204      	movs	r2, #4
 8001652:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	73fb      	strb	r3, [r7, #15]
 8001658:	e051      	b.n	80016fe <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f022 020e 	bic.w	r2, r2, #14
 8001668:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f022 0201 	bic.w	r2, r2, #1
 8001678:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a22      	ldr	r2, [pc, #136]	; (8001708 <HAL_DMA_Abort_IT+0xd0>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d029      	beq.n	80016d8 <HAL_DMA_Abort_IT+0xa0>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a20      	ldr	r2, [pc, #128]	; (800170c <HAL_DMA_Abort_IT+0xd4>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d022      	beq.n	80016d4 <HAL_DMA_Abort_IT+0x9c>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a1f      	ldr	r2, [pc, #124]	; (8001710 <HAL_DMA_Abort_IT+0xd8>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d01a      	beq.n	80016ce <HAL_DMA_Abort_IT+0x96>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a1d      	ldr	r2, [pc, #116]	; (8001714 <HAL_DMA_Abort_IT+0xdc>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d012      	beq.n	80016c8 <HAL_DMA_Abort_IT+0x90>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a1c      	ldr	r2, [pc, #112]	; (8001718 <HAL_DMA_Abort_IT+0xe0>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d00a      	beq.n	80016c2 <HAL_DMA_Abort_IT+0x8a>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a1a      	ldr	r2, [pc, #104]	; (800171c <HAL_DMA_Abort_IT+0xe4>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d102      	bne.n	80016bc <HAL_DMA_Abort_IT+0x84>
 80016b6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80016ba:	e00e      	b.n	80016da <HAL_DMA_Abort_IT+0xa2>
 80016bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80016c0:	e00b      	b.n	80016da <HAL_DMA_Abort_IT+0xa2>
 80016c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016c6:	e008      	b.n	80016da <HAL_DMA_Abort_IT+0xa2>
 80016c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016cc:	e005      	b.n	80016da <HAL_DMA_Abort_IT+0xa2>
 80016ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016d2:	e002      	b.n	80016da <HAL_DMA_Abort_IT+0xa2>
 80016d4:	2310      	movs	r3, #16
 80016d6:	e000      	b.n	80016da <HAL_DMA_Abort_IT+0xa2>
 80016d8:	2301      	movs	r3, #1
 80016da:	4a11      	ldr	r2, [pc, #68]	; (8001720 <HAL_DMA_Abort_IT+0xe8>)
 80016dc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2201      	movs	r2, #1
 80016e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2200      	movs	r2, #0
 80016ea:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d003      	beq.n	80016fe <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	4798      	blx	r3
    } 
  }
  return status;
 80016fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001700:	4618      	mov	r0, r3
 8001702:	3710      	adds	r7, #16
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	40020008 	.word	0x40020008
 800170c:	4002001c 	.word	0x4002001c
 8001710:	40020030 	.word	0x40020030
 8001714:	40020044 	.word	0x40020044
 8001718:	40020058 	.word	0x40020058
 800171c:	4002006c 	.word	0x4002006c
 8001720:	40020000 	.word	0x40020000

08001724 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001724:	b480      	push	{r7}
 8001726:	b08b      	sub	sp, #44	; 0x2c
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800172e:	2300      	movs	r3, #0
 8001730:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001732:	2300      	movs	r3, #0
 8001734:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001736:	e127      	b.n	8001988 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001738:	2201      	movs	r2, #1
 800173a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173c:	fa02 f303 	lsl.w	r3, r2, r3
 8001740:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	69fa      	ldr	r2, [r7, #28]
 8001748:	4013      	ands	r3, r2
 800174a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800174c:	69ba      	ldr	r2, [r7, #24]
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	429a      	cmp	r2, r3
 8001752:	f040 8116 	bne.w	8001982 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	2b12      	cmp	r3, #18
 800175c:	d034      	beq.n	80017c8 <HAL_GPIO_Init+0xa4>
 800175e:	2b12      	cmp	r3, #18
 8001760:	d80d      	bhi.n	800177e <HAL_GPIO_Init+0x5a>
 8001762:	2b02      	cmp	r3, #2
 8001764:	d02b      	beq.n	80017be <HAL_GPIO_Init+0x9a>
 8001766:	2b02      	cmp	r3, #2
 8001768:	d804      	bhi.n	8001774 <HAL_GPIO_Init+0x50>
 800176a:	2b00      	cmp	r3, #0
 800176c:	d031      	beq.n	80017d2 <HAL_GPIO_Init+0xae>
 800176e:	2b01      	cmp	r3, #1
 8001770:	d01c      	beq.n	80017ac <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001772:	e048      	b.n	8001806 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001774:	2b03      	cmp	r3, #3
 8001776:	d043      	beq.n	8001800 <HAL_GPIO_Init+0xdc>
 8001778:	2b11      	cmp	r3, #17
 800177a:	d01b      	beq.n	80017b4 <HAL_GPIO_Init+0x90>
          break;
 800177c:	e043      	b.n	8001806 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800177e:	4a89      	ldr	r2, [pc, #548]	; (80019a4 <HAL_GPIO_Init+0x280>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d026      	beq.n	80017d2 <HAL_GPIO_Init+0xae>
 8001784:	4a87      	ldr	r2, [pc, #540]	; (80019a4 <HAL_GPIO_Init+0x280>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d806      	bhi.n	8001798 <HAL_GPIO_Init+0x74>
 800178a:	4a87      	ldr	r2, [pc, #540]	; (80019a8 <HAL_GPIO_Init+0x284>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d020      	beq.n	80017d2 <HAL_GPIO_Init+0xae>
 8001790:	4a86      	ldr	r2, [pc, #536]	; (80019ac <HAL_GPIO_Init+0x288>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d01d      	beq.n	80017d2 <HAL_GPIO_Init+0xae>
          break;
 8001796:	e036      	b.n	8001806 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001798:	4a85      	ldr	r2, [pc, #532]	; (80019b0 <HAL_GPIO_Init+0x28c>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d019      	beq.n	80017d2 <HAL_GPIO_Init+0xae>
 800179e:	4a85      	ldr	r2, [pc, #532]	; (80019b4 <HAL_GPIO_Init+0x290>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d016      	beq.n	80017d2 <HAL_GPIO_Init+0xae>
 80017a4:	4a84      	ldr	r2, [pc, #528]	; (80019b8 <HAL_GPIO_Init+0x294>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d013      	beq.n	80017d2 <HAL_GPIO_Init+0xae>
          break;
 80017aa:	e02c      	b.n	8001806 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	623b      	str	r3, [r7, #32]
          break;
 80017b2:	e028      	b.n	8001806 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	3304      	adds	r3, #4
 80017ba:	623b      	str	r3, [r7, #32]
          break;
 80017bc:	e023      	b.n	8001806 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	68db      	ldr	r3, [r3, #12]
 80017c2:	3308      	adds	r3, #8
 80017c4:	623b      	str	r3, [r7, #32]
          break;
 80017c6:	e01e      	b.n	8001806 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	330c      	adds	r3, #12
 80017ce:	623b      	str	r3, [r7, #32]
          break;
 80017d0:	e019      	b.n	8001806 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d102      	bne.n	80017e0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80017da:	2304      	movs	r3, #4
 80017dc:	623b      	str	r3, [r7, #32]
          break;
 80017de:	e012      	b.n	8001806 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d105      	bne.n	80017f4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017e8:	2308      	movs	r3, #8
 80017ea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	69fa      	ldr	r2, [r7, #28]
 80017f0:	611a      	str	r2, [r3, #16]
          break;
 80017f2:	e008      	b.n	8001806 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017f4:	2308      	movs	r3, #8
 80017f6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	69fa      	ldr	r2, [r7, #28]
 80017fc:	615a      	str	r2, [r3, #20]
          break;
 80017fe:	e002      	b.n	8001806 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001800:	2300      	movs	r3, #0
 8001802:	623b      	str	r3, [r7, #32]
          break;
 8001804:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001806:	69bb      	ldr	r3, [r7, #24]
 8001808:	2bff      	cmp	r3, #255	; 0xff
 800180a:	d801      	bhi.n	8001810 <HAL_GPIO_Init+0xec>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	e001      	b.n	8001814 <HAL_GPIO_Init+0xf0>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	3304      	adds	r3, #4
 8001814:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001816:	69bb      	ldr	r3, [r7, #24]
 8001818:	2bff      	cmp	r3, #255	; 0xff
 800181a:	d802      	bhi.n	8001822 <HAL_GPIO_Init+0xfe>
 800181c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	e002      	b.n	8001828 <HAL_GPIO_Init+0x104>
 8001822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001824:	3b08      	subs	r3, #8
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	210f      	movs	r1, #15
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	fa01 f303 	lsl.w	r3, r1, r3
 8001836:	43db      	mvns	r3, r3
 8001838:	401a      	ands	r2, r3
 800183a:	6a39      	ldr	r1, [r7, #32]
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	fa01 f303 	lsl.w	r3, r1, r3
 8001842:	431a      	orrs	r2, r3
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001850:	2b00      	cmp	r3, #0
 8001852:	f000 8096 	beq.w	8001982 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001856:	4b59      	ldr	r3, [pc, #356]	; (80019bc <HAL_GPIO_Init+0x298>)
 8001858:	699b      	ldr	r3, [r3, #24]
 800185a:	4a58      	ldr	r2, [pc, #352]	; (80019bc <HAL_GPIO_Init+0x298>)
 800185c:	f043 0301 	orr.w	r3, r3, #1
 8001860:	6193      	str	r3, [r2, #24]
 8001862:	4b56      	ldr	r3, [pc, #344]	; (80019bc <HAL_GPIO_Init+0x298>)
 8001864:	699b      	ldr	r3, [r3, #24]
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	60bb      	str	r3, [r7, #8]
 800186c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800186e:	4a54      	ldr	r2, [pc, #336]	; (80019c0 <HAL_GPIO_Init+0x29c>)
 8001870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001872:	089b      	lsrs	r3, r3, #2
 8001874:	3302      	adds	r3, #2
 8001876:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800187a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800187c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187e:	f003 0303 	and.w	r3, r3, #3
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	220f      	movs	r2, #15
 8001886:	fa02 f303 	lsl.w	r3, r2, r3
 800188a:	43db      	mvns	r3, r3
 800188c:	68fa      	ldr	r2, [r7, #12]
 800188e:	4013      	ands	r3, r2
 8001890:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4a4b      	ldr	r2, [pc, #300]	; (80019c4 <HAL_GPIO_Init+0x2a0>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d013      	beq.n	80018c2 <HAL_GPIO_Init+0x19e>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4a4a      	ldr	r2, [pc, #296]	; (80019c8 <HAL_GPIO_Init+0x2a4>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d00d      	beq.n	80018be <HAL_GPIO_Init+0x19a>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4a49      	ldr	r2, [pc, #292]	; (80019cc <HAL_GPIO_Init+0x2a8>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d007      	beq.n	80018ba <HAL_GPIO_Init+0x196>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4a48      	ldr	r2, [pc, #288]	; (80019d0 <HAL_GPIO_Init+0x2ac>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d101      	bne.n	80018b6 <HAL_GPIO_Init+0x192>
 80018b2:	2303      	movs	r3, #3
 80018b4:	e006      	b.n	80018c4 <HAL_GPIO_Init+0x1a0>
 80018b6:	2304      	movs	r3, #4
 80018b8:	e004      	b.n	80018c4 <HAL_GPIO_Init+0x1a0>
 80018ba:	2302      	movs	r3, #2
 80018bc:	e002      	b.n	80018c4 <HAL_GPIO_Init+0x1a0>
 80018be:	2301      	movs	r3, #1
 80018c0:	e000      	b.n	80018c4 <HAL_GPIO_Init+0x1a0>
 80018c2:	2300      	movs	r3, #0
 80018c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018c6:	f002 0203 	and.w	r2, r2, #3
 80018ca:	0092      	lsls	r2, r2, #2
 80018cc:	4093      	lsls	r3, r2
 80018ce:	68fa      	ldr	r2, [r7, #12]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80018d4:	493a      	ldr	r1, [pc, #232]	; (80019c0 <HAL_GPIO_Init+0x29c>)
 80018d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d8:	089b      	lsrs	r3, r3, #2
 80018da:	3302      	adds	r3, #2
 80018dc:	68fa      	ldr	r2, [r7, #12]
 80018de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d006      	beq.n	80018fc <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80018ee:	4b39      	ldr	r3, [pc, #228]	; (80019d4 <HAL_GPIO_Init+0x2b0>)
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	4938      	ldr	r1, [pc, #224]	; (80019d4 <HAL_GPIO_Init+0x2b0>)
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	600b      	str	r3, [r1, #0]
 80018fa:	e006      	b.n	800190a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80018fc:	4b35      	ldr	r3, [pc, #212]	; (80019d4 <HAL_GPIO_Init+0x2b0>)
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	43db      	mvns	r3, r3
 8001904:	4933      	ldr	r1, [pc, #204]	; (80019d4 <HAL_GPIO_Init+0x2b0>)
 8001906:	4013      	ands	r3, r2
 8001908:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d006      	beq.n	8001924 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001916:	4b2f      	ldr	r3, [pc, #188]	; (80019d4 <HAL_GPIO_Init+0x2b0>)
 8001918:	685a      	ldr	r2, [r3, #4]
 800191a:	492e      	ldr	r1, [pc, #184]	; (80019d4 <HAL_GPIO_Init+0x2b0>)
 800191c:	69bb      	ldr	r3, [r7, #24]
 800191e:	4313      	orrs	r3, r2
 8001920:	604b      	str	r3, [r1, #4]
 8001922:	e006      	b.n	8001932 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001924:	4b2b      	ldr	r3, [pc, #172]	; (80019d4 <HAL_GPIO_Init+0x2b0>)
 8001926:	685a      	ldr	r2, [r3, #4]
 8001928:	69bb      	ldr	r3, [r7, #24]
 800192a:	43db      	mvns	r3, r3
 800192c:	4929      	ldr	r1, [pc, #164]	; (80019d4 <HAL_GPIO_Init+0x2b0>)
 800192e:	4013      	ands	r3, r2
 8001930:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d006      	beq.n	800194c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800193e:	4b25      	ldr	r3, [pc, #148]	; (80019d4 <HAL_GPIO_Init+0x2b0>)
 8001940:	689a      	ldr	r2, [r3, #8]
 8001942:	4924      	ldr	r1, [pc, #144]	; (80019d4 <HAL_GPIO_Init+0x2b0>)
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	4313      	orrs	r3, r2
 8001948:	608b      	str	r3, [r1, #8]
 800194a:	e006      	b.n	800195a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800194c:	4b21      	ldr	r3, [pc, #132]	; (80019d4 <HAL_GPIO_Init+0x2b0>)
 800194e:	689a      	ldr	r2, [r3, #8]
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	43db      	mvns	r3, r3
 8001954:	491f      	ldr	r1, [pc, #124]	; (80019d4 <HAL_GPIO_Init+0x2b0>)
 8001956:	4013      	ands	r3, r2
 8001958:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d006      	beq.n	8001974 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001966:	4b1b      	ldr	r3, [pc, #108]	; (80019d4 <HAL_GPIO_Init+0x2b0>)
 8001968:	68da      	ldr	r2, [r3, #12]
 800196a:	491a      	ldr	r1, [pc, #104]	; (80019d4 <HAL_GPIO_Init+0x2b0>)
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	4313      	orrs	r3, r2
 8001970:	60cb      	str	r3, [r1, #12]
 8001972:	e006      	b.n	8001982 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001974:	4b17      	ldr	r3, [pc, #92]	; (80019d4 <HAL_GPIO_Init+0x2b0>)
 8001976:	68da      	ldr	r2, [r3, #12]
 8001978:	69bb      	ldr	r3, [r7, #24]
 800197a:	43db      	mvns	r3, r3
 800197c:	4915      	ldr	r1, [pc, #84]	; (80019d4 <HAL_GPIO_Init+0x2b0>)
 800197e:	4013      	ands	r3, r2
 8001980:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001984:	3301      	adds	r3, #1
 8001986:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198e:	fa22 f303 	lsr.w	r3, r2, r3
 8001992:	2b00      	cmp	r3, #0
 8001994:	f47f aed0 	bne.w	8001738 <HAL_GPIO_Init+0x14>
  }
}
 8001998:	bf00      	nop
 800199a:	372c      	adds	r7, #44	; 0x2c
 800199c:	46bd      	mov	sp, r7
 800199e:	bc80      	pop	{r7}
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	10210000 	.word	0x10210000
 80019a8:	10110000 	.word	0x10110000
 80019ac:	10120000 	.word	0x10120000
 80019b0:	10310000 	.word	0x10310000
 80019b4:	10320000 	.word	0x10320000
 80019b8:	10220000 	.word	0x10220000
 80019bc:	40021000 	.word	0x40021000
 80019c0:	40010000 	.word	0x40010000
 80019c4:	40010800 	.word	0x40010800
 80019c8:	40010c00 	.word	0x40010c00
 80019cc:	40011000 	.word	0x40011000
 80019d0:	40011400 	.word	0x40011400
 80019d4:	40010400 	.word	0x40010400

080019d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	460b      	mov	r3, r1
 80019e2:	807b      	strh	r3, [r7, #2]
 80019e4:	4613      	mov	r3, r2
 80019e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019e8:	787b      	ldrb	r3, [r7, #1]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d003      	beq.n	80019f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019ee:	887a      	ldrh	r2, [r7, #2]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80019f4:	e003      	b.n	80019fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80019f6:	887b      	ldrh	r3, [r7, #2]
 80019f8:	041a      	lsls	r2, r3, #16
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	611a      	str	r2, [r3, #16]
}
 80019fe:	bf00      	nop
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bc80      	pop	{r7}
 8001a06:	4770      	bx	lr

08001a08 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	460b      	mov	r3, r1
 8001a12:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	68da      	ldr	r2, [r3, #12]
 8001a18:	887b      	ldrh	r3, [r7, #2]
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d003      	beq.n	8001a28 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a20:	887a      	ldrh	r2, [r7, #2]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001a26:	e002      	b.n	8001a2e <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a28:	887a      	ldrh	r2, [r7, #2]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	611a      	str	r2, [r3, #16]
}
 8001a2e:	bf00      	nop
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bc80      	pop	{r7}
 8001a36:	4770      	bx	lr

08001a38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b086      	sub	sp, #24
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d101      	bne.n	8001a4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e26c      	b.n	8001f24 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0301 	and.w	r3, r3, #1
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	f000 8087 	beq.w	8001b66 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a58:	4b92      	ldr	r3, [pc, #584]	; (8001ca4 <HAL_RCC_OscConfig+0x26c>)
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f003 030c 	and.w	r3, r3, #12
 8001a60:	2b04      	cmp	r3, #4
 8001a62:	d00c      	beq.n	8001a7e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a64:	4b8f      	ldr	r3, [pc, #572]	; (8001ca4 <HAL_RCC_OscConfig+0x26c>)
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f003 030c 	and.w	r3, r3, #12
 8001a6c:	2b08      	cmp	r3, #8
 8001a6e:	d112      	bne.n	8001a96 <HAL_RCC_OscConfig+0x5e>
 8001a70:	4b8c      	ldr	r3, [pc, #560]	; (8001ca4 <HAL_RCC_OscConfig+0x26c>)
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a7c:	d10b      	bne.n	8001a96 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a7e:	4b89      	ldr	r3, [pc, #548]	; (8001ca4 <HAL_RCC_OscConfig+0x26c>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d06c      	beq.n	8001b64 <HAL_RCC_OscConfig+0x12c>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d168      	bne.n	8001b64 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e246      	b.n	8001f24 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a9e:	d106      	bne.n	8001aae <HAL_RCC_OscConfig+0x76>
 8001aa0:	4b80      	ldr	r3, [pc, #512]	; (8001ca4 <HAL_RCC_OscConfig+0x26c>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a7f      	ldr	r2, [pc, #508]	; (8001ca4 <HAL_RCC_OscConfig+0x26c>)
 8001aa6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aaa:	6013      	str	r3, [r2, #0]
 8001aac:	e02e      	b.n	8001b0c <HAL_RCC_OscConfig+0xd4>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d10c      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x98>
 8001ab6:	4b7b      	ldr	r3, [pc, #492]	; (8001ca4 <HAL_RCC_OscConfig+0x26c>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a7a      	ldr	r2, [pc, #488]	; (8001ca4 <HAL_RCC_OscConfig+0x26c>)
 8001abc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ac0:	6013      	str	r3, [r2, #0]
 8001ac2:	4b78      	ldr	r3, [pc, #480]	; (8001ca4 <HAL_RCC_OscConfig+0x26c>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a77      	ldr	r2, [pc, #476]	; (8001ca4 <HAL_RCC_OscConfig+0x26c>)
 8001ac8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001acc:	6013      	str	r3, [r2, #0]
 8001ace:	e01d      	b.n	8001b0c <HAL_RCC_OscConfig+0xd4>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ad8:	d10c      	bne.n	8001af4 <HAL_RCC_OscConfig+0xbc>
 8001ada:	4b72      	ldr	r3, [pc, #456]	; (8001ca4 <HAL_RCC_OscConfig+0x26c>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a71      	ldr	r2, [pc, #452]	; (8001ca4 <HAL_RCC_OscConfig+0x26c>)
 8001ae0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ae4:	6013      	str	r3, [r2, #0]
 8001ae6:	4b6f      	ldr	r3, [pc, #444]	; (8001ca4 <HAL_RCC_OscConfig+0x26c>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a6e      	ldr	r2, [pc, #440]	; (8001ca4 <HAL_RCC_OscConfig+0x26c>)
 8001aec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001af0:	6013      	str	r3, [r2, #0]
 8001af2:	e00b      	b.n	8001b0c <HAL_RCC_OscConfig+0xd4>
 8001af4:	4b6b      	ldr	r3, [pc, #428]	; (8001ca4 <HAL_RCC_OscConfig+0x26c>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a6a      	ldr	r2, [pc, #424]	; (8001ca4 <HAL_RCC_OscConfig+0x26c>)
 8001afa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001afe:	6013      	str	r3, [r2, #0]
 8001b00:	4b68      	ldr	r3, [pc, #416]	; (8001ca4 <HAL_RCC_OscConfig+0x26c>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a67      	ldr	r2, [pc, #412]	; (8001ca4 <HAL_RCC_OscConfig+0x26c>)
 8001b06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b0a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d013      	beq.n	8001b3c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b14:	f7ff f83c 	bl	8000b90 <HAL_GetTick>
 8001b18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b1a:	e008      	b.n	8001b2e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b1c:	f7ff f838 	bl	8000b90 <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	2b64      	cmp	r3, #100	; 0x64
 8001b28:	d901      	bls.n	8001b2e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e1fa      	b.n	8001f24 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b2e:	4b5d      	ldr	r3, [pc, #372]	; (8001ca4 <HAL_RCC_OscConfig+0x26c>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d0f0      	beq.n	8001b1c <HAL_RCC_OscConfig+0xe4>
 8001b3a:	e014      	b.n	8001b66 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b3c:	f7ff f828 	bl	8000b90 <HAL_GetTick>
 8001b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b42:	e008      	b.n	8001b56 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b44:	f7ff f824 	bl	8000b90 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	2b64      	cmp	r3, #100	; 0x64
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e1e6      	b.n	8001f24 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b56:	4b53      	ldr	r3, [pc, #332]	; (8001ca4 <HAL_RCC_OscConfig+0x26c>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d1f0      	bne.n	8001b44 <HAL_RCC_OscConfig+0x10c>
 8001b62:	e000      	b.n	8001b66 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0302 	and.w	r3, r3, #2
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d063      	beq.n	8001c3a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b72:	4b4c      	ldr	r3, [pc, #304]	; (8001ca4 <HAL_RCC_OscConfig+0x26c>)
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f003 030c 	and.w	r3, r3, #12
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d00b      	beq.n	8001b96 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b7e:	4b49      	ldr	r3, [pc, #292]	; (8001ca4 <HAL_RCC_OscConfig+0x26c>)
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f003 030c 	and.w	r3, r3, #12
 8001b86:	2b08      	cmp	r3, #8
 8001b88:	d11c      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x18c>
 8001b8a:	4b46      	ldr	r3, [pc, #280]	; (8001ca4 <HAL_RCC_OscConfig+0x26c>)
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d116      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b96:	4b43      	ldr	r3, [pc, #268]	; (8001ca4 <HAL_RCC_OscConfig+0x26c>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0302 	and.w	r3, r3, #2
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d005      	beq.n	8001bae <HAL_RCC_OscConfig+0x176>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	691b      	ldr	r3, [r3, #16]
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d001      	beq.n	8001bae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e1ba      	b.n	8001f24 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bae:	4b3d      	ldr	r3, [pc, #244]	; (8001ca4 <HAL_RCC_OscConfig+0x26c>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	695b      	ldr	r3, [r3, #20]
 8001bba:	00db      	lsls	r3, r3, #3
 8001bbc:	4939      	ldr	r1, [pc, #228]	; (8001ca4 <HAL_RCC_OscConfig+0x26c>)
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bc2:	e03a      	b.n	8001c3a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	691b      	ldr	r3, [r3, #16]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d020      	beq.n	8001c0e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bcc:	4b36      	ldr	r3, [pc, #216]	; (8001ca8 <HAL_RCC_OscConfig+0x270>)
 8001bce:	2201      	movs	r2, #1
 8001bd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd2:	f7fe ffdd 	bl	8000b90 <HAL_GetTick>
 8001bd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bd8:	e008      	b.n	8001bec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bda:	f7fe ffd9 	bl	8000b90 <HAL_GetTick>
 8001bde:	4602      	mov	r2, r0
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d901      	bls.n	8001bec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001be8:	2303      	movs	r3, #3
 8001bea:	e19b      	b.n	8001f24 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bec:	4b2d      	ldr	r3, [pc, #180]	; (8001ca4 <HAL_RCC_OscConfig+0x26c>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0302 	and.w	r3, r3, #2
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d0f0      	beq.n	8001bda <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bf8:	4b2a      	ldr	r3, [pc, #168]	; (8001ca4 <HAL_RCC_OscConfig+0x26c>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	695b      	ldr	r3, [r3, #20]
 8001c04:	00db      	lsls	r3, r3, #3
 8001c06:	4927      	ldr	r1, [pc, #156]	; (8001ca4 <HAL_RCC_OscConfig+0x26c>)
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	600b      	str	r3, [r1, #0]
 8001c0c:	e015      	b.n	8001c3a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c0e:	4b26      	ldr	r3, [pc, #152]	; (8001ca8 <HAL_RCC_OscConfig+0x270>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c14:	f7fe ffbc 	bl	8000b90 <HAL_GetTick>
 8001c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c1a:	e008      	b.n	8001c2e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c1c:	f7fe ffb8 	bl	8000b90 <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e17a      	b.n	8001f24 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c2e:	4b1d      	ldr	r3, [pc, #116]	; (8001ca4 <HAL_RCC_OscConfig+0x26c>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0302 	and.w	r3, r3, #2
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d1f0      	bne.n	8001c1c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0308 	and.w	r3, r3, #8
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d03a      	beq.n	8001cbc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	699b      	ldr	r3, [r3, #24]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d019      	beq.n	8001c82 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c4e:	4b17      	ldr	r3, [pc, #92]	; (8001cac <HAL_RCC_OscConfig+0x274>)
 8001c50:	2201      	movs	r2, #1
 8001c52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c54:	f7fe ff9c 	bl	8000b90 <HAL_GetTick>
 8001c58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c5a:	e008      	b.n	8001c6e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c5c:	f7fe ff98 	bl	8000b90 <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e15a      	b.n	8001f24 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c6e:	4b0d      	ldr	r3, [pc, #52]	; (8001ca4 <HAL_RCC_OscConfig+0x26c>)
 8001c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d0f0      	beq.n	8001c5c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c7a:	2001      	movs	r0, #1
 8001c7c:	f000 fada 	bl	8002234 <RCC_Delay>
 8001c80:	e01c      	b.n	8001cbc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c82:	4b0a      	ldr	r3, [pc, #40]	; (8001cac <HAL_RCC_OscConfig+0x274>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c88:	f7fe ff82 	bl	8000b90 <HAL_GetTick>
 8001c8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c8e:	e00f      	b.n	8001cb0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c90:	f7fe ff7e 	bl	8000b90 <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d908      	bls.n	8001cb0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e140      	b.n	8001f24 <HAL_RCC_OscConfig+0x4ec>
 8001ca2:	bf00      	nop
 8001ca4:	40021000 	.word	0x40021000
 8001ca8:	42420000 	.word	0x42420000
 8001cac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cb0:	4b9e      	ldr	r3, [pc, #632]	; (8001f2c <HAL_RCC_OscConfig+0x4f4>)
 8001cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb4:	f003 0302 	and.w	r3, r3, #2
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d1e9      	bne.n	8001c90 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 0304 	and.w	r3, r3, #4
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	f000 80a6 	beq.w	8001e16 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cce:	4b97      	ldr	r3, [pc, #604]	; (8001f2c <HAL_RCC_OscConfig+0x4f4>)
 8001cd0:	69db      	ldr	r3, [r3, #28]
 8001cd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d10d      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cda:	4b94      	ldr	r3, [pc, #592]	; (8001f2c <HAL_RCC_OscConfig+0x4f4>)
 8001cdc:	69db      	ldr	r3, [r3, #28]
 8001cde:	4a93      	ldr	r2, [pc, #588]	; (8001f2c <HAL_RCC_OscConfig+0x4f4>)
 8001ce0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ce4:	61d3      	str	r3, [r2, #28]
 8001ce6:	4b91      	ldr	r3, [pc, #580]	; (8001f2c <HAL_RCC_OscConfig+0x4f4>)
 8001ce8:	69db      	ldr	r3, [r3, #28]
 8001cea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cee:	60bb      	str	r3, [r7, #8]
 8001cf0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cf6:	4b8e      	ldr	r3, [pc, #568]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d118      	bne.n	8001d34 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d02:	4b8b      	ldr	r3, [pc, #556]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a8a      	ldr	r2, [pc, #552]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001d08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d0e:	f7fe ff3f 	bl	8000b90 <HAL_GetTick>
 8001d12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d14:	e008      	b.n	8001d28 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d16:	f7fe ff3b 	bl	8000b90 <HAL_GetTick>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	2b64      	cmp	r3, #100	; 0x64
 8001d22:	d901      	bls.n	8001d28 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d24:	2303      	movs	r3, #3
 8001d26:	e0fd      	b.n	8001f24 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d28:	4b81      	ldr	r3, [pc, #516]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d0f0      	beq.n	8001d16 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d106      	bne.n	8001d4a <HAL_RCC_OscConfig+0x312>
 8001d3c:	4b7b      	ldr	r3, [pc, #492]	; (8001f2c <HAL_RCC_OscConfig+0x4f4>)
 8001d3e:	6a1b      	ldr	r3, [r3, #32]
 8001d40:	4a7a      	ldr	r2, [pc, #488]	; (8001f2c <HAL_RCC_OscConfig+0x4f4>)
 8001d42:	f043 0301 	orr.w	r3, r3, #1
 8001d46:	6213      	str	r3, [r2, #32]
 8001d48:	e02d      	b.n	8001da6 <HAL_RCC_OscConfig+0x36e>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	68db      	ldr	r3, [r3, #12]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d10c      	bne.n	8001d6c <HAL_RCC_OscConfig+0x334>
 8001d52:	4b76      	ldr	r3, [pc, #472]	; (8001f2c <HAL_RCC_OscConfig+0x4f4>)
 8001d54:	6a1b      	ldr	r3, [r3, #32]
 8001d56:	4a75      	ldr	r2, [pc, #468]	; (8001f2c <HAL_RCC_OscConfig+0x4f4>)
 8001d58:	f023 0301 	bic.w	r3, r3, #1
 8001d5c:	6213      	str	r3, [r2, #32]
 8001d5e:	4b73      	ldr	r3, [pc, #460]	; (8001f2c <HAL_RCC_OscConfig+0x4f4>)
 8001d60:	6a1b      	ldr	r3, [r3, #32]
 8001d62:	4a72      	ldr	r2, [pc, #456]	; (8001f2c <HAL_RCC_OscConfig+0x4f4>)
 8001d64:	f023 0304 	bic.w	r3, r3, #4
 8001d68:	6213      	str	r3, [r2, #32]
 8001d6a:	e01c      	b.n	8001da6 <HAL_RCC_OscConfig+0x36e>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	2b05      	cmp	r3, #5
 8001d72:	d10c      	bne.n	8001d8e <HAL_RCC_OscConfig+0x356>
 8001d74:	4b6d      	ldr	r3, [pc, #436]	; (8001f2c <HAL_RCC_OscConfig+0x4f4>)
 8001d76:	6a1b      	ldr	r3, [r3, #32]
 8001d78:	4a6c      	ldr	r2, [pc, #432]	; (8001f2c <HAL_RCC_OscConfig+0x4f4>)
 8001d7a:	f043 0304 	orr.w	r3, r3, #4
 8001d7e:	6213      	str	r3, [r2, #32]
 8001d80:	4b6a      	ldr	r3, [pc, #424]	; (8001f2c <HAL_RCC_OscConfig+0x4f4>)
 8001d82:	6a1b      	ldr	r3, [r3, #32]
 8001d84:	4a69      	ldr	r2, [pc, #420]	; (8001f2c <HAL_RCC_OscConfig+0x4f4>)
 8001d86:	f043 0301 	orr.w	r3, r3, #1
 8001d8a:	6213      	str	r3, [r2, #32]
 8001d8c:	e00b      	b.n	8001da6 <HAL_RCC_OscConfig+0x36e>
 8001d8e:	4b67      	ldr	r3, [pc, #412]	; (8001f2c <HAL_RCC_OscConfig+0x4f4>)
 8001d90:	6a1b      	ldr	r3, [r3, #32]
 8001d92:	4a66      	ldr	r2, [pc, #408]	; (8001f2c <HAL_RCC_OscConfig+0x4f4>)
 8001d94:	f023 0301 	bic.w	r3, r3, #1
 8001d98:	6213      	str	r3, [r2, #32]
 8001d9a:	4b64      	ldr	r3, [pc, #400]	; (8001f2c <HAL_RCC_OscConfig+0x4f4>)
 8001d9c:	6a1b      	ldr	r3, [r3, #32]
 8001d9e:	4a63      	ldr	r2, [pc, #396]	; (8001f2c <HAL_RCC_OscConfig+0x4f4>)
 8001da0:	f023 0304 	bic.w	r3, r3, #4
 8001da4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	68db      	ldr	r3, [r3, #12]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d015      	beq.n	8001dda <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dae:	f7fe feef 	bl	8000b90 <HAL_GetTick>
 8001db2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001db4:	e00a      	b.n	8001dcc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001db6:	f7fe feeb 	bl	8000b90 <HAL_GetTick>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d901      	bls.n	8001dcc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	e0ab      	b.n	8001f24 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dcc:	4b57      	ldr	r3, [pc, #348]	; (8001f2c <HAL_RCC_OscConfig+0x4f4>)
 8001dce:	6a1b      	ldr	r3, [r3, #32]
 8001dd0:	f003 0302 	and.w	r3, r3, #2
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d0ee      	beq.n	8001db6 <HAL_RCC_OscConfig+0x37e>
 8001dd8:	e014      	b.n	8001e04 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dda:	f7fe fed9 	bl	8000b90 <HAL_GetTick>
 8001dde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001de0:	e00a      	b.n	8001df8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001de2:	f7fe fed5 	bl	8000b90 <HAL_GetTick>
 8001de6:	4602      	mov	r2, r0
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	f241 3288 	movw	r2, #5000	; 0x1388
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d901      	bls.n	8001df8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001df4:	2303      	movs	r3, #3
 8001df6:	e095      	b.n	8001f24 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001df8:	4b4c      	ldr	r3, [pc, #304]	; (8001f2c <HAL_RCC_OscConfig+0x4f4>)
 8001dfa:	6a1b      	ldr	r3, [r3, #32]
 8001dfc:	f003 0302 	and.w	r3, r3, #2
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d1ee      	bne.n	8001de2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e04:	7dfb      	ldrb	r3, [r7, #23]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d105      	bne.n	8001e16 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e0a:	4b48      	ldr	r3, [pc, #288]	; (8001f2c <HAL_RCC_OscConfig+0x4f4>)
 8001e0c:	69db      	ldr	r3, [r3, #28]
 8001e0e:	4a47      	ldr	r2, [pc, #284]	; (8001f2c <HAL_RCC_OscConfig+0x4f4>)
 8001e10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e14:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	69db      	ldr	r3, [r3, #28]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	f000 8081 	beq.w	8001f22 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e20:	4b42      	ldr	r3, [pc, #264]	; (8001f2c <HAL_RCC_OscConfig+0x4f4>)
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f003 030c 	and.w	r3, r3, #12
 8001e28:	2b08      	cmp	r3, #8
 8001e2a:	d061      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	69db      	ldr	r3, [r3, #28]
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	d146      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e34:	4b3f      	ldr	r3, [pc, #252]	; (8001f34 <HAL_RCC_OscConfig+0x4fc>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e3a:	f7fe fea9 	bl	8000b90 <HAL_GetTick>
 8001e3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e40:	e008      	b.n	8001e54 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e42:	f7fe fea5 	bl	8000b90 <HAL_GetTick>
 8001e46:	4602      	mov	r2, r0
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	d901      	bls.n	8001e54 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e50:	2303      	movs	r3, #3
 8001e52:	e067      	b.n	8001f24 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e54:	4b35      	ldr	r3, [pc, #212]	; (8001f2c <HAL_RCC_OscConfig+0x4f4>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d1f0      	bne.n	8001e42 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6a1b      	ldr	r3, [r3, #32]
 8001e64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e68:	d108      	bne.n	8001e7c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e6a:	4b30      	ldr	r3, [pc, #192]	; (8001f2c <HAL_RCC_OscConfig+0x4f4>)
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	492d      	ldr	r1, [pc, #180]	; (8001f2c <HAL_RCC_OscConfig+0x4f4>)
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e7c:	4b2b      	ldr	r3, [pc, #172]	; (8001f2c <HAL_RCC_OscConfig+0x4f4>)
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6a19      	ldr	r1, [r3, #32]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e8c:	430b      	orrs	r3, r1
 8001e8e:	4927      	ldr	r1, [pc, #156]	; (8001f2c <HAL_RCC_OscConfig+0x4f4>)
 8001e90:	4313      	orrs	r3, r2
 8001e92:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e94:	4b27      	ldr	r3, [pc, #156]	; (8001f34 <HAL_RCC_OscConfig+0x4fc>)
 8001e96:	2201      	movs	r2, #1
 8001e98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e9a:	f7fe fe79 	bl	8000b90 <HAL_GetTick>
 8001e9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ea0:	e008      	b.n	8001eb4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ea2:	f7fe fe75 	bl	8000b90 <HAL_GetTick>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	2b02      	cmp	r3, #2
 8001eae:	d901      	bls.n	8001eb4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	e037      	b.n	8001f24 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001eb4:	4b1d      	ldr	r3, [pc, #116]	; (8001f2c <HAL_RCC_OscConfig+0x4f4>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d0f0      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x46a>
 8001ec0:	e02f      	b.n	8001f22 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ec2:	4b1c      	ldr	r3, [pc, #112]	; (8001f34 <HAL_RCC_OscConfig+0x4fc>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec8:	f7fe fe62 	bl	8000b90 <HAL_GetTick>
 8001ecc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ece:	e008      	b.n	8001ee2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ed0:	f7fe fe5e 	bl	8000b90 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e020      	b.n	8001f24 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ee2:	4b12      	ldr	r3, [pc, #72]	; (8001f2c <HAL_RCC_OscConfig+0x4f4>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d1f0      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x498>
 8001eee:	e018      	b.n	8001f22 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	69db      	ldr	r3, [r3, #28]
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d101      	bne.n	8001efc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e013      	b.n	8001f24 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001efc:	4b0b      	ldr	r3, [pc, #44]	; (8001f2c <HAL_RCC_OscConfig+0x4f4>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a1b      	ldr	r3, [r3, #32]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d106      	bne.n	8001f1e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d001      	beq.n	8001f22 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e000      	b.n	8001f24 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001f22:	2300      	movs	r3, #0
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3718      	adds	r7, #24
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	40021000 	.word	0x40021000
 8001f30:	40007000 	.word	0x40007000
 8001f34:	42420060 	.word	0x42420060

08001f38 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d101      	bne.n	8001f4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e0d0      	b.n	80020ee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f4c:	4b6a      	ldr	r3, [pc, #424]	; (80020f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0307 	and.w	r3, r3, #7
 8001f54:	683a      	ldr	r2, [r7, #0]
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d910      	bls.n	8001f7c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f5a:	4b67      	ldr	r3, [pc, #412]	; (80020f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f023 0207 	bic.w	r2, r3, #7
 8001f62:	4965      	ldr	r1, [pc, #404]	; (80020f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f6a:	4b63      	ldr	r3, [pc, #396]	; (80020f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0307 	and.w	r3, r3, #7
 8001f72:	683a      	ldr	r2, [r7, #0]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d001      	beq.n	8001f7c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e0b8      	b.n	80020ee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0302 	and.w	r3, r3, #2
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d020      	beq.n	8001fca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0304 	and.w	r3, r3, #4
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d005      	beq.n	8001fa0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f94:	4b59      	ldr	r3, [pc, #356]	; (80020fc <HAL_RCC_ClockConfig+0x1c4>)
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	4a58      	ldr	r2, [pc, #352]	; (80020fc <HAL_RCC_ClockConfig+0x1c4>)
 8001f9a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f9e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0308 	and.w	r3, r3, #8
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d005      	beq.n	8001fb8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fac:	4b53      	ldr	r3, [pc, #332]	; (80020fc <HAL_RCC_ClockConfig+0x1c4>)
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	4a52      	ldr	r2, [pc, #328]	; (80020fc <HAL_RCC_ClockConfig+0x1c4>)
 8001fb2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001fb6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fb8:	4b50      	ldr	r3, [pc, #320]	; (80020fc <HAL_RCC_ClockConfig+0x1c4>)
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	494d      	ldr	r1, [pc, #308]	; (80020fc <HAL_RCC_ClockConfig+0x1c4>)
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0301 	and.w	r3, r3, #1
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d040      	beq.n	8002058 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d107      	bne.n	8001fee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fde:	4b47      	ldr	r3, [pc, #284]	; (80020fc <HAL_RCC_ClockConfig+0x1c4>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d115      	bne.n	8002016 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e07f      	b.n	80020ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d107      	bne.n	8002006 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ff6:	4b41      	ldr	r3, [pc, #260]	; (80020fc <HAL_RCC_ClockConfig+0x1c4>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d109      	bne.n	8002016 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e073      	b.n	80020ee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002006:	4b3d      	ldr	r3, [pc, #244]	; (80020fc <HAL_RCC_ClockConfig+0x1c4>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0302 	and.w	r3, r3, #2
 800200e:	2b00      	cmp	r3, #0
 8002010:	d101      	bne.n	8002016 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e06b      	b.n	80020ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002016:	4b39      	ldr	r3, [pc, #228]	; (80020fc <HAL_RCC_ClockConfig+0x1c4>)
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f023 0203 	bic.w	r2, r3, #3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	4936      	ldr	r1, [pc, #216]	; (80020fc <HAL_RCC_ClockConfig+0x1c4>)
 8002024:	4313      	orrs	r3, r2
 8002026:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002028:	f7fe fdb2 	bl	8000b90 <HAL_GetTick>
 800202c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800202e:	e00a      	b.n	8002046 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002030:	f7fe fdae 	bl	8000b90 <HAL_GetTick>
 8002034:	4602      	mov	r2, r0
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	f241 3288 	movw	r2, #5000	; 0x1388
 800203e:	4293      	cmp	r3, r2
 8002040:	d901      	bls.n	8002046 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e053      	b.n	80020ee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002046:	4b2d      	ldr	r3, [pc, #180]	; (80020fc <HAL_RCC_ClockConfig+0x1c4>)
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f003 020c 	and.w	r2, r3, #12
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	429a      	cmp	r2, r3
 8002056:	d1eb      	bne.n	8002030 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002058:	4b27      	ldr	r3, [pc, #156]	; (80020f8 <HAL_RCC_ClockConfig+0x1c0>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0307 	and.w	r3, r3, #7
 8002060:	683a      	ldr	r2, [r7, #0]
 8002062:	429a      	cmp	r2, r3
 8002064:	d210      	bcs.n	8002088 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002066:	4b24      	ldr	r3, [pc, #144]	; (80020f8 <HAL_RCC_ClockConfig+0x1c0>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f023 0207 	bic.w	r2, r3, #7
 800206e:	4922      	ldr	r1, [pc, #136]	; (80020f8 <HAL_RCC_ClockConfig+0x1c0>)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	4313      	orrs	r3, r2
 8002074:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002076:	4b20      	ldr	r3, [pc, #128]	; (80020f8 <HAL_RCC_ClockConfig+0x1c0>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0307 	and.w	r3, r3, #7
 800207e:	683a      	ldr	r2, [r7, #0]
 8002080:	429a      	cmp	r2, r3
 8002082:	d001      	beq.n	8002088 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e032      	b.n	80020ee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0304 	and.w	r3, r3, #4
 8002090:	2b00      	cmp	r3, #0
 8002092:	d008      	beq.n	80020a6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002094:	4b19      	ldr	r3, [pc, #100]	; (80020fc <HAL_RCC_ClockConfig+0x1c4>)
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	4916      	ldr	r1, [pc, #88]	; (80020fc <HAL_RCC_ClockConfig+0x1c4>)
 80020a2:	4313      	orrs	r3, r2
 80020a4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0308 	and.w	r3, r3, #8
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d009      	beq.n	80020c6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020b2:	4b12      	ldr	r3, [pc, #72]	; (80020fc <HAL_RCC_ClockConfig+0x1c4>)
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	691b      	ldr	r3, [r3, #16]
 80020be:	00db      	lsls	r3, r3, #3
 80020c0:	490e      	ldr	r1, [pc, #56]	; (80020fc <HAL_RCC_ClockConfig+0x1c4>)
 80020c2:	4313      	orrs	r3, r2
 80020c4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020c6:	f000 f821 	bl	800210c <HAL_RCC_GetSysClockFreq>
 80020ca:	4601      	mov	r1, r0
 80020cc:	4b0b      	ldr	r3, [pc, #44]	; (80020fc <HAL_RCC_ClockConfig+0x1c4>)
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	091b      	lsrs	r3, r3, #4
 80020d2:	f003 030f 	and.w	r3, r3, #15
 80020d6:	4a0a      	ldr	r2, [pc, #40]	; (8002100 <HAL_RCC_ClockConfig+0x1c8>)
 80020d8:	5cd3      	ldrb	r3, [r2, r3]
 80020da:	fa21 f303 	lsr.w	r3, r1, r3
 80020de:	4a09      	ldr	r2, [pc, #36]	; (8002104 <HAL_RCC_ClockConfig+0x1cc>)
 80020e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80020e2:	4b09      	ldr	r3, [pc, #36]	; (8002108 <HAL_RCC_ClockConfig+0x1d0>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4618      	mov	r0, r3
 80020e8:	f7fe fd10 	bl	8000b0c <HAL_InitTick>

  return HAL_OK;
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3710      	adds	r7, #16
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	40022000 	.word	0x40022000
 80020fc:	40021000 	.word	0x40021000
 8002100:	08003ba4 	.word	0x08003ba4
 8002104:	20000028 	.word	0x20000028
 8002108:	2000002c 	.word	0x2000002c

0800210c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800210c:	b490      	push	{r4, r7}
 800210e:	b08a      	sub	sp, #40	; 0x28
 8002110:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002112:	4b2a      	ldr	r3, [pc, #168]	; (80021bc <HAL_RCC_GetSysClockFreq+0xb0>)
 8002114:	1d3c      	adds	r4, r7, #4
 8002116:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002118:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800211c:	4b28      	ldr	r3, [pc, #160]	; (80021c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800211e:	881b      	ldrh	r3, [r3, #0]
 8002120:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002122:	2300      	movs	r3, #0
 8002124:	61fb      	str	r3, [r7, #28]
 8002126:	2300      	movs	r3, #0
 8002128:	61bb      	str	r3, [r7, #24]
 800212a:	2300      	movs	r3, #0
 800212c:	627b      	str	r3, [r7, #36]	; 0x24
 800212e:	2300      	movs	r3, #0
 8002130:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002132:	2300      	movs	r3, #0
 8002134:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002136:	4b23      	ldr	r3, [pc, #140]	; (80021c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	f003 030c 	and.w	r3, r3, #12
 8002142:	2b04      	cmp	r3, #4
 8002144:	d002      	beq.n	800214c <HAL_RCC_GetSysClockFreq+0x40>
 8002146:	2b08      	cmp	r3, #8
 8002148:	d003      	beq.n	8002152 <HAL_RCC_GetSysClockFreq+0x46>
 800214a:	e02d      	b.n	80021a8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800214c:	4b1e      	ldr	r3, [pc, #120]	; (80021c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800214e:	623b      	str	r3, [r7, #32]
      break;
 8002150:	e02d      	b.n	80021ae <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	0c9b      	lsrs	r3, r3, #18
 8002156:	f003 030f 	and.w	r3, r3, #15
 800215a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800215e:	4413      	add	r3, r2
 8002160:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002164:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d013      	beq.n	8002198 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002170:	4b14      	ldr	r3, [pc, #80]	; (80021c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	0c5b      	lsrs	r3, r3, #17
 8002176:	f003 0301 	and.w	r3, r3, #1
 800217a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800217e:	4413      	add	r3, r2
 8002180:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002184:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	4a0f      	ldr	r2, [pc, #60]	; (80021c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800218a:	fb02 f203 	mul.w	r2, r2, r3
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	fbb2 f3f3 	udiv	r3, r2, r3
 8002194:	627b      	str	r3, [r7, #36]	; 0x24
 8002196:	e004      	b.n	80021a2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	4a0c      	ldr	r2, [pc, #48]	; (80021cc <HAL_RCC_GetSysClockFreq+0xc0>)
 800219c:	fb02 f303 	mul.w	r3, r2, r3
 80021a0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80021a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a4:	623b      	str	r3, [r7, #32]
      break;
 80021a6:	e002      	b.n	80021ae <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021a8:	4b07      	ldr	r3, [pc, #28]	; (80021c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80021aa:	623b      	str	r3, [r7, #32]
      break;
 80021ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021ae:	6a3b      	ldr	r3, [r7, #32]
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3728      	adds	r7, #40	; 0x28
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bc90      	pop	{r4, r7}
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	08003b7c 	.word	0x08003b7c
 80021c0:	08003b8c 	.word	0x08003b8c
 80021c4:	40021000 	.word	0x40021000
 80021c8:	007a1200 	.word	0x007a1200
 80021cc:	003d0900 	.word	0x003d0900

080021d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021d4:	4b02      	ldr	r3, [pc, #8]	; (80021e0 <HAL_RCC_GetHCLKFreq+0x10>)
 80021d6:	681b      	ldr	r3, [r3, #0]
}
 80021d8:	4618      	mov	r0, r3
 80021da:	46bd      	mov	sp, r7
 80021dc:	bc80      	pop	{r7}
 80021de:	4770      	bx	lr
 80021e0:	20000028 	.word	0x20000028

080021e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80021e8:	f7ff fff2 	bl	80021d0 <HAL_RCC_GetHCLKFreq>
 80021ec:	4601      	mov	r1, r0
 80021ee:	4b05      	ldr	r3, [pc, #20]	; (8002204 <HAL_RCC_GetPCLK1Freq+0x20>)
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	0a1b      	lsrs	r3, r3, #8
 80021f4:	f003 0307 	and.w	r3, r3, #7
 80021f8:	4a03      	ldr	r2, [pc, #12]	; (8002208 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021fa:	5cd3      	ldrb	r3, [r2, r3]
 80021fc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002200:	4618      	mov	r0, r3
 8002202:	bd80      	pop	{r7, pc}
 8002204:	40021000 	.word	0x40021000
 8002208:	08003bb4 	.word	0x08003bb4

0800220c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002210:	f7ff ffde 	bl	80021d0 <HAL_RCC_GetHCLKFreq>
 8002214:	4601      	mov	r1, r0
 8002216:	4b05      	ldr	r3, [pc, #20]	; (800222c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	0adb      	lsrs	r3, r3, #11
 800221c:	f003 0307 	and.w	r3, r3, #7
 8002220:	4a03      	ldr	r2, [pc, #12]	; (8002230 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002222:	5cd3      	ldrb	r3, [r2, r3]
 8002224:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002228:	4618      	mov	r0, r3
 800222a:	bd80      	pop	{r7, pc}
 800222c:	40021000 	.word	0x40021000
 8002230:	08003bb4 	.word	0x08003bb4

08002234 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002234:	b480      	push	{r7}
 8002236:	b085      	sub	sp, #20
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800223c:	4b0a      	ldr	r3, [pc, #40]	; (8002268 <RCC_Delay+0x34>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a0a      	ldr	r2, [pc, #40]	; (800226c <RCC_Delay+0x38>)
 8002242:	fba2 2303 	umull	r2, r3, r2, r3
 8002246:	0a5b      	lsrs	r3, r3, #9
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	fb02 f303 	mul.w	r3, r2, r3
 800224e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002250:	bf00      	nop
  }
  while (Delay --);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	1e5a      	subs	r2, r3, #1
 8002256:	60fa      	str	r2, [r7, #12]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d1f9      	bne.n	8002250 <RCC_Delay+0x1c>
}
 800225c:	bf00      	nop
 800225e:	3714      	adds	r7, #20
 8002260:	46bd      	mov	sp, r7
 8002262:	bc80      	pop	{r7}
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	20000028 	.word	0x20000028
 800226c:	10624dd3 	.word	0x10624dd3

08002270 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b086      	sub	sp, #24
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002278:	2300      	movs	r3, #0
 800227a:	613b      	str	r3, [r7, #16]
 800227c:	2300      	movs	r3, #0
 800227e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0301 	and.w	r3, r3, #1
 8002288:	2b00      	cmp	r3, #0
 800228a:	d07d      	beq.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800228c:	2300      	movs	r3, #0
 800228e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002290:	4b4f      	ldr	r3, [pc, #316]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002292:	69db      	ldr	r3, [r3, #28]
 8002294:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002298:	2b00      	cmp	r3, #0
 800229a:	d10d      	bne.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800229c:	4b4c      	ldr	r3, [pc, #304]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800229e:	69db      	ldr	r3, [r3, #28]
 80022a0:	4a4b      	ldr	r2, [pc, #300]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022a6:	61d3      	str	r3, [r2, #28]
 80022a8:	4b49      	ldr	r3, [pc, #292]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022aa:	69db      	ldr	r3, [r3, #28]
 80022ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022b0:	60bb      	str	r3, [r7, #8]
 80022b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022b4:	2301      	movs	r3, #1
 80022b6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022b8:	4b46      	ldr	r3, [pc, #280]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d118      	bne.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022c4:	4b43      	ldr	r3, [pc, #268]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a42      	ldr	r2, [pc, #264]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022ce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022d0:	f7fe fc5e 	bl	8000b90 <HAL_GetTick>
 80022d4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022d6:	e008      	b.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022d8:	f7fe fc5a 	bl	8000b90 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	2b64      	cmp	r3, #100	; 0x64
 80022e4:	d901      	bls.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e06d      	b.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ea:	4b3a      	ldr	r3, [pc, #232]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d0f0      	beq.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80022f6:	4b36      	ldr	r3, [pc, #216]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022f8:	6a1b      	ldr	r3, [r3, #32]
 80022fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022fe:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d02e      	beq.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800230e:	68fa      	ldr	r2, [r7, #12]
 8002310:	429a      	cmp	r2, r3
 8002312:	d027      	beq.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002314:	4b2e      	ldr	r3, [pc, #184]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002316:	6a1b      	ldr	r3, [r3, #32]
 8002318:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800231c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800231e:	4b2e      	ldr	r3, [pc, #184]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002320:	2201      	movs	r2, #1
 8002322:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002324:	4b2c      	ldr	r3, [pc, #176]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002326:	2200      	movs	r2, #0
 8002328:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800232a:	4a29      	ldr	r2, [pc, #164]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f003 0301 	and.w	r3, r3, #1
 8002336:	2b00      	cmp	r3, #0
 8002338:	d014      	beq.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800233a:	f7fe fc29 	bl	8000b90 <HAL_GetTick>
 800233e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002340:	e00a      	b.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002342:	f7fe fc25 	bl	8000b90 <HAL_GetTick>
 8002346:	4602      	mov	r2, r0
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002350:	4293      	cmp	r3, r2
 8002352:	d901      	bls.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002354:	2303      	movs	r3, #3
 8002356:	e036      	b.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002358:	4b1d      	ldr	r3, [pc, #116]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800235a:	6a1b      	ldr	r3, [r3, #32]
 800235c:	f003 0302 	and.w	r3, r3, #2
 8002360:	2b00      	cmp	r3, #0
 8002362:	d0ee      	beq.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002364:	4b1a      	ldr	r3, [pc, #104]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002366:	6a1b      	ldr	r3, [r3, #32]
 8002368:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	4917      	ldr	r1, [pc, #92]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002372:	4313      	orrs	r3, r2
 8002374:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002376:	7dfb      	ldrb	r3, [r7, #23]
 8002378:	2b01      	cmp	r3, #1
 800237a:	d105      	bne.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800237c:	4b14      	ldr	r3, [pc, #80]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800237e:	69db      	ldr	r3, [r3, #28]
 8002380:	4a13      	ldr	r2, [pc, #76]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002382:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002386:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0302 	and.w	r3, r3, #2
 8002390:	2b00      	cmp	r3, #0
 8002392:	d008      	beq.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002394:	4b0e      	ldr	r3, [pc, #56]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	490b      	ldr	r1, [pc, #44]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023a2:	4313      	orrs	r3, r2
 80023a4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0310 	and.w	r3, r3, #16
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d008      	beq.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80023b2:	4b07      	ldr	r3, [pc, #28]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	4904      	ldr	r1, [pc, #16]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023c0:	4313      	orrs	r3, r2
 80023c2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80023c4:	2300      	movs	r3, #0
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3718      	adds	r7, #24
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	40021000 	.word	0x40021000
 80023d4:	40007000 	.word	0x40007000
 80023d8:	42420440 	.word	0x42420440

080023dc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80023dc:	b590      	push	{r4, r7, lr}
 80023de:	b08d      	sub	sp, #52	; 0x34
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80023e4:	4b55      	ldr	r3, [pc, #340]	; (800253c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80023e6:	f107 040c 	add.w	r4, r7, #12
 80023ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80023f0:	4b53      	ldr	r3, [pc, #332]	; (8002540 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80023f2:	881b      	ldrh	r3, [r3, #0]
 80023f4:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80023f6:	2300      	movs	r3, #0
 80023f8:	627b      	str	r3, [r7, #36]	; 0x24
 80023fa:	2300      	movs	r3, #0
 80023fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023fe:	2300      	movs	r3, #0
 8002400:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002402:	2300      	movs	r3, #0
 8002404:	61fb      	str	r3, [r7, #28]
 8002406:	2300      	movs	r3, #0
 8002408:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2b02      	cmp	r3, #2
 800240e:	d07f      	beq.n	8002510 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8002410:	2b10      	cmp	r3, #16
 8002412:	d002      	beq.n	800241a <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8002414:	2b01      	cmp	r3, #1
 8002416:	d048      	beq.n	80024aa <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002418:	e08b      	b.n	8002532 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 800241a:	4b4a      	ldr	r3, [pc, #296]	; (8002544 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002420:	4b48      	ldr	r3, [pc, #288]	; (8002544 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d07f      	beq.n	800252c <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	0c9b      	lsrs	r3, r3, #18
 8002430:	f003 030f 	and.w	r3, r3, #15
 8002434:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002438:	4413      	add	r3, r2
 800243a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800243e:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d018      	beq.n	800247c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800244a:	4b3e      	ldr	r3, [pc, #248]	; (8002544 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	0c5b      	lsrs	r3, r3, #17
 8002450:	f003 0301 	and.w	r3, r3, #1
 8002454:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002458:	4413      	add	r3, r2
 800245a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800245e:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d00d      	beq.n	8002486 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800246a:	4a37      	ldr	r2, [pc, #220]	; (8002548 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 800246c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002472:	6a3b      	ldr	r3, [r7, #32]
 8002474:	fb02 f303 	mul.w	r3, r2, r3
 8002478:	62fb      	str	r3, [r7, #44]	; 0x2c
 800247a:	e004      	b.n	8002486 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800247c:	6a3b      	ldr	r3, [r7, #32]
 800247e:	4a33      	ldr	r2, [pc, #204]	; (800254c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002480:	fb02 f303 	mul.w	r3, r2, r3
 8002484:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002486:	4b2f      	ldr	r3, [pc, #188]	; (8002544 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800248e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002492:	d102      	bne.n	800249a <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8002494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002496:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002498:	e048      	b.n	800252c <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 800249a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800249c:	005b      	lsls	r3, r3, #1
 800249e:	4a2c      	ldr	r2, [pc, #176]	; (8002550 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80024a0:	fba2 2303 	umull	r2, r3, r2, r3
 80024a4:	085b      	lsrs	r3, r3, #1
 80024a6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80024a8:	e040      	b.n	800252c <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 80024aa:	4b26      	ldr	r3, [pc, #152]	; (8002544 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80024ac:	6a1b      	ldr	r3, [r3, #32]
 80024ae:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024ba:	d108      	bne.n	80024ce <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d003      	beq.n	80024ce <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 80024c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80024cc:	e01f      	b.n	800250e <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024d8:	d109      	bne.n	80024ee <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 80024da:	4b1a      	ldr	r3, [pc, #104]	; (8002544 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80024dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024de:	f003 0302 	and.w	r3, r3, #2
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d003      	beq.n	80024ee <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 80024e6:	f649 4340 	movw	r3, #40000	; 0x9c40
 80024ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80024ec:	e00f      	b.n	800250e <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80024f8:	d11a      	bne.n	8002530 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80024fa:	4b12      	ldr	r3, [pc, #72]	; (8002544 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d014      	beq.n	8002530 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 8002506:	f24f 4324 	movw	r3, #62500	; 0xf424
 800250a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800250c:	e010      	b.n	8002530 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 800250e:	e00f      	b.n	8002530 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002510:	f7ff fe7c 	bl	800220c <HAL_RCC_GetPCLK2Freq>
 8002514:	4602      	mov	r2, r0
 8002516:	4b0b      	ldr	r3, [pc, #44]	; (8002544 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	0b9b      	lsrs	r3, r3, #14
 800251c:	f003 0303 	and.w	r3, r3, #3
 8002520:	3301      	adds	r3, #1
 8002522:	005b      	lsls	r3, r3, #1
 8002524:	fbb2 f3f3 	udiv	r3, r2, r3
 8002528:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800252a:	e002      	b.n	8002532 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 800252c:	bf00      	nop
 800252e:	e000      	b.n	8002532 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8002530:	bf00      	nop
    }
  }
  return (frequency);
 8002532:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002534:	4618      	mov	r0, r3
 8002536:	3734      	adds	r7, #52	; 0x34
 8002538:	46bd      	mov	sp, r7
 800253a:	bd90      	pop	{r4, r7, pc}
 800253c:	08003b90 	.word	0x08003b90
 8002540:	08003ba0 	.word	0x08003ba0
 8002544:	40021000 	.word	0x40021000
 8002548:	007a1200 	.word	0x007a1200
 800254c:	003d0900 	.word	0x003d0900
 8002550:	aaaaaaab 	.word	0xaaaaaaab

08002554 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d101      	bne.n	8002566 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e01d      	b.n	80025a2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800256c:	b2db      	uxtb	r3, r3
 800256e:	2b00      	cmp	r3, #0
 8002570:	d106      	bne.n	8002580 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f7fe f96e 	bl	800085c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2202      	movs	r2, #2
 8002584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	3304      	adds	r3, #4
 8002590:	4619      	mov	r1, r3
 8002592:	4610      	mov	r0, r2
 8002594:	f000 fb34 	bl	8002c00 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2201      	movs	r2, #1
 800259c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025a0:	2300      	movs	r3, #0
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3708      	adds	r7, #8
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}

080025aa <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80025aa:	b480      	push	{r7}
 80025ac:	b085      	sub	sp, #20
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	68da      	ldr	r2, [r3, #12]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f042 0201 	orr.w	r2, r2, #1
 80025c0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	f003 0307 	and.w	r3, r3, #7
 80025cc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2b06      	cmp	r3, #6
 80025d2:	d007      	beq.n	80025e4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f042 0201 	orr.w	r2, r2, #1
 80025e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80025e4:	2300      	movs	r3, #0
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3714      	adds	r7, #20
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bc80      	pop	{r7}
 80025ee:	4770      	bx	lr

080025f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d101      	bne.n	8002602 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e01d      	b.n	800263e <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002608:	b2db      	uxtb	r3, r3
 800260a:	2b00      	cmp	r3, #0
 800260c:	d106      	bne.n	800261c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f7fe f902 	bl	8000820 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2202      	movs	r2, #2
 8002620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	3304      	adds	r3, #4
 800262c:	4619      	mov	r1, r3
 800262e:	4610      	mov	r0, r2
 8002630:	f000 fae6 	bl	8002c00 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2201      	movs	r2, #1
 8002638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800263c:	2300      	movs	r3, #0
}
 800263e:	4618      	mov	r0, r3
 8002640:	3708      	adds	r7, #8
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
	...

08002648 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	2201      	movs	r2, #1
 8002658:	6839      	ldr	r1, [r7, #0]
 800265a:	4618      	mov	r0, r3
 800265c:	f000 fd50 	bl	8003100 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a10      	ldr	r2, [pc, #64]	; (80026a8 <HAL_TIM_PWM_Start+0x60>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d107      	bne.n	800267a <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002678:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	f003 0307 	and.w	r3, r3, #7
 8002684:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2b06      	cmp	r3, #6
 800268a:	d007      	beq.n	800269c <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f042 0201 	orr.w	r2, r2, #1
 800269a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800269c:	2300      	movs	r3, #0
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3710      	adds	r7, #16
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	40012c00 	.word	0x40012c00

080026ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	691b      	ldr	r3, [r3, #16]
 80026ba:	f003 0302 	and.w	r3, r3, #2
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d122      	bne.n	8002708 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	f003 0302 	and.w	r3, r3, #2
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d11b      	bne.n	8002708 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f06f 0202 	mvn.w	r2, #2
 80026d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2201      	movs	r2, #1
 80026de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	699b      	ldr	r3, [r3, #24]
 80026e6:	f003 0303 	and.w	r3, r3, #3
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d003      	beq.n	80026f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f000 fa6a 	bl	8002bc8 <HAL_TIM_IC_CaptureCallback>
 80026f4:	e005      	b.n	8002702 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f000 fa5d 	bl	8002bb6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f000 fa6c 	bl	8002bda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2200      	movs	r2, #0
 8002706:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	691b      	ldr	r3, [r3, #16]
 800270e:	f003 0304 	and.w	r3, r3, #4
 8002712:	2b04      	cmp	r3, #4
 8002714:	d122      	bne.n	800275c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	f003 0304 	and.w	r3, r3, #4
 8002720:	2b04      	cmp	r3, #4
 8002722:	d11b      	bne.n	800275c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f06f 0204 	mvn.w	r2, #4
 800272c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2202      	movs	r2, #2
 8002732:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	699b      	ldr	r3, [r3, #24]
 800273a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800273e:	2b00      	cmp	r3, #0
 8002740:	d003      	beq.n	800274a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f000 fa40 	bl	8002bc8 <HAL_TIM_IC_CaptureCallback>
 8002748:	e005      	b.n	8002756 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f000 fa33 	bl	8002bb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	f000 fa42 	bl	8002bda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	691b      	ldr	r3, [r3, #16]
 8002762:	f003 0308 	and.w	r3, r3, #8
 8002766:	2b08      	cmp	r3, #8
 8002768:	d122      	bne.n	80027b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	f003 0308 	and.w	r3, r3, #8
 8002774:	2b08      	cmp	r3, #8
 8002776:	d11b      	bne.n	80027b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f06f 0208 	mvn.w	r2, #8
 8002780:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2204      	movs	r2, #4
 8002786:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	69db      	ldr	r3, [r3, #28]
 800278e:	f003 0303 	and.w	r3, r3, #3
 8002792:	2b00      	cmp	r3, #0
 8002794:	d003      	beq.n	800279e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f000 fa16 	bl	8002bc8 <HAL_TIM_IC_CaptureCallback>
 800279c:	e005      	b.n	80027aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f000 fa09 	bl	8002bb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f000 fa18 	bl	8002bda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	691b      	ldr	r3, [r3, #16]
 80027b6:	f003 0310 	and.w	r3, r3, #16
 80027ba:	2b10      	cmp	r3, #16
 80027bc:	d122      	bne.n	8002804 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	f003 0310 	and.w	r3, r3, #16
 80027c8:	2b10      	cmp	r3, #16
 80027ca:	d11b      	bne.n	8002804 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f06f 0210 	mvn.w	r2, #16
 80027d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2208      	movs	r2, #8
 80027da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	69db      	ldr	r3, [r3, #28]
 80027e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d003      	beq.n	80027f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f000 f9ec 	bl	8002bc8 <HAL_TIM_IC_CaptureCallback>
 80027f0:	e005      	b.n	80027fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f000 f9df 	bl	8002bb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f000 f9ee 	bl	8002bda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	691b      	ldr	r3, [r3, #16]
 800280a:	f003 0301 	and.w	r3, r3, #1
 800280e:	2b01      	cmp	r3, #1
 8002810:	d10e      	bne.n	8002830 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	f003 0301 	and.w	r3, r3, #1
 800281c:	2b01      	cmp	r3, #1
 800281e:	d107      	bne.n	8002830 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f06f 0201 	mvn.w	r2, #1
 8002828:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f7fd fc8e 	bl	800014c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	691b      	ldr	r3, [r3, #16]
 8002836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800283a:	2b80      	cmp	r3, #128	; 0x80
 800283c:	d10e      	bne.n	800285c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002848:	2b80      	cmp	r3, #128	; 0x80
 800284a:	d107      	bne.n	800285c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002854:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f000 fcc3 	bl	80031e2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	691b      	ldr	r3, [r3, #16]
 8002862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002866:	2b40      	cmp	r3, #64	; 0x40
 8002868:	d10e      	bne.n	8002888 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002874:	2b40      	cmp	r3, #64	; 0x40
 8002876:	d107      	bne.n	8002888 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002880:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f000 f9b2 	bl	8002bec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	f003 0320 	and.w	r3, r3, #32
 8002892:	2b20      	cmp	r3, #32
 8002894:	d10e      	bne.n	80028b4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	f003 0320 	and.w	r3, r3, #32
 80028a0:	2b20      	cmp	r3, #32
 80028a2:	d107      	bne.n	80028b4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f06f 0220 	mvn.w	r2, #32
 80028ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f000 fc8e 	bl	80031d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80028b4:	bf00      	nop
 80028b6:	3708      	adds	r7, #8
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}

080028bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	60f8      	str	r0, [r7, #12]
 80028c4:	60b9      	str	r1, [r7, #8]
 80028c6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d101      	bne.n	80028d6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80028d2:	2302      	movs	r3, #2
 80028d4:	e0b4      	b.n	8002a40 <HAL_TIM_PWM_ConfigChannel+0x184>
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2201      	movs	r2, #1
 80028da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2202      	movs	r2, #2
 80028e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2b0c      	cmp	r3, #12
 80028ea:	f200 809f 	bhi.w	8002a2c <HAL_TIM_PWM_ConfigChannel+0x170>
 80028ee:	a201      	add	r2, pc, #4	; (adr r2, 80028f4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80028f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028f4:	08002929 	.word	0x08002929
 80028f8:	08002a2d 	.word	0x08002a2d
 80028fc:	08002a2d 	.word	0x08002a2d
 8002900:	08002a2d 	.word	0x08002a2d
 8002904:	08002969 	.word	0x08002969
 8002908:	08002a2d 	.word	0x08002a2d
 800290c:	08002a2d 	.word	0x08002a2d
 8002910:	08002a2d 	.word	0x08002a2d
 8002914:	080029ab 	.word	0x080029ab
 8002918:	08002a2d 	.word	0x08002a2d
 800291c:	08002a2d 	.word	0x08002a2d
 8002920:	08002a2d 	.word	0x08002a2d
 8002924:	080029eb 	.word	0x080029eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	68b9      	ldr	r1, [r7, #8]
 800292e:	4618      	mov	r0, r3
 8002930:	f000 f9c8 	bl	8002cc4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	699a      	ldr	r2, [r3, #24]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f042 0208 	orr.w	r2, r2, #8
 8002942:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	699a      	ldr	r2, [r3, #24]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f022 0204 	bic.w	r2, r2, #4
 8002952:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	6999      	ldr	r1, [r3, #24]
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	691a      	ldr	r2, [r3, #16]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	430a      	orrs	r2, r1
 8002964:	619a      	str	r2, [r3, #24]
      break;
 8002966:	e062      	b.n	8002a2e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	68b9      	ldr	r1, [r7, #8]
 800296e:	4618      	mov	r0, r3
 8002970:	f000 fa0e 	bl	8002d90 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	699a      	ldr	r2, [r3, #24]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002982:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	699a      	ldr	r2, [r3, #24]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002992:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	6999      	ldr	r1, [r3, #24]
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	691b      	ldr	r3, [r3, #16]
 800299e:	021a      	lsls	r2, r3, #8
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	430a      	orrs	r2, r1
 80029a6:	619a      	str	r2, [r3, #24]
      break;
 80029a8:	e041      	b.n	8002a2e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	68b9      	ldr	r1, [r7, #8]
 80029b0:	4618      	mov	r0, r3
 80029b2:	f000 fa57 	bl	8002e64 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	69da      	ldr	r2, [r3, #28]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f042 0208 	orr.w	r2, r2, #8
 80029c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	69da      	ldr	r2, [r3, #28]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f022 0204 	bic.w	r2, r2, #4
 80029d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	69d9      	ldr	r1, [r3, #28]
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	691a      	ldr	r2, [r3, #16]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	430a      	orrs	r2, r1
 80029e6:	61da      	str	r2, [r3, #28]
      break;
 80029e8:	e021      	b.n	8002a2e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	68b9      	ldr	r1, [r7, #8]
 80029f0:	4618      	mov	r0, r3
 80029f2:	f000 faa1 	bl	8002f38 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	69da      	ldr	r2, [r3, #28]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	69da      	ldr	r2, [r3, #28]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	69d9      	ldr	r1, [r3, #28]
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	691b      	ldr	r3, [r3, #16]
 8002a20:	021a      	lsls	r2, r3, #8
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	430a      	orrs	r2, r1
 8002a28:	61da      	str	r2, [r3, #28]
      break;
 8002a2a:	e000      	b.n	8002a2e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002a2c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2201      	movs	r2, #1
 8002a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a3e:	2300      	movs	r3, #0
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3710      	adds	r7, #16
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d101      	bne.n	8002a60 <HAL_TIM_ConfigClockSource+0x18>
 8002a5c:	2302      	movs	r3, #2
 8002a5e:	e0a6      	b.n	8002bae <HAL_TIM_ConfigClockSource+0x166>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2202      	movs	r2, #2
 8002a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002a7e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a86:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	68fa      	ldr	r2, [r7, #12]
 8002a8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2b40      	cmp	r3, #64	; 0x40
 8002a96:	d067      	beq.n	8002b68 <HAL_TIM_ConfigClockSource+0x120>
 8002a98:	2b40      	cmp	r3, #64	; 0x40
 8002a9a:	d80b      	bhi.n	8002ab4 <HAL_TIM_ConfigClockSource+0x6c>
 8002a9c:	2b10      	cmp	r3, #16
 8002a9e:	d073      	beq.n	8002b88 <HAL_TIM_ConfigClockSource+0x140>
 8002aa0:	2b10      	cmp	r3, #16
 8002aa2:	d802      	bhi.n	8002aaa <HAL_TIM_ConfigClockSource+0x62>
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d06f      	beq.n	8002b88 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002aa8:	e078      	b.n	8002b9c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002aaa:	2b20      	cmp	r3, #32
 8002aac:	d06c      	beq.n	8002b88 <HAL_TIM_ConfigClockSource+0x140>
 8002aae:	2b30      	cmp	r3, #48	; 0x30
 8002ab0:	d06a      	beq.n	8002b88 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002ab2:	e073      	b.n	8002b9c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002ab4:	2b70      	cmp	r3, #112	; 0x70
 8002ab6:	d00d      	beq.n	8002ad4 <HAL_TIM_ConfigClockSource+0x8c>
 8002ab8:	2b70      	cmp	r3, #112	; 0x70
 8002aba:	d804      	bhi.n	8002ac6 <HAL_TIM_ConfigClockSource+0x7e>
 8002abc:	2b50      	cmp	r3, #80	; 0x50
 8002abe:	d033      	beq.n	8002b28 <HAL_TIM_ConfigClockSource+0xe0>
 8002ac0:	2b60      	cmp	r3, #96	; 0x60
 8002ac2:	d041      	beq.n	8002b48 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002ac4:	e06a      	b.n	8002b9c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002ac6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002aca:	d066      	beq.n	8002b9a <HAL_TIM_ConfigClockSource+0x152>
 8002acc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ad0:	d017      	beq.n	8002b02 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002ad2:	e063      	b.n	8002b9c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6818      	ldr	r0, [r3, #0]
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	6899      	ldr	r1, [r3, #8]
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	685a      	ldr	r2, [r3, #4]
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	f000 faed 	bl	80030c2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002af6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	68fa      	ldr	r2, [r7, #12]
 8002afe:	609a      	str	r2, [r3, #8]
      break;
 8002b00:	e04c      	b.n	8002b9c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6818      	ldr	r0, [r3, #0]
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	6899      	ldr	r1, [r3, #8]
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	685a      	ldr	r2, [r3, #4]
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	f000 fad6 	bl	80030c2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	689a      	ldr	r2, [r3, #8]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b24:	609a      	str	r2, [r3, #8]
      break;
 8002b26:	e039      	b.n	8002b9c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6818      	ldr	r0, [r3, #0]
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	6859      	ldr	r1, [r3, #4]
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	461a      	mov	r2, r3
 8002b36:	f000 fa4d 	bl	8002fd4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	2150      	movs	r1, #80	; 0x50
 8002b40:	4618      	mov	r0, r3
 8002b42:	f000 faa4 	bl	800308e <TIM_ITRx_SetConfig>
      break;
 8002b46:	e029      	b.n	8002b9c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6818      	ldr	r0, [r3, #0]
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	6859      	ldr	r1, [r3, #4]
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	461a      	mov	r2, r3
 8002b56:	f000 fa6b 	bl	8003030 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2160      	movs	r1, #96	; 0x60
 8002b60:	4618      	mov	r0, r3
 8002b62:	f000 fa94 	bl	800308e <TIM_ITRx_SetConfig>
      break;
 8002b66:	e019      	b.n	8002b9c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6818      	ldr	r0, [r3, #0]
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	6859      	ldr	r1, [r3, #4]
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	461a      	mov	r2, r3
 8002b76:	f000 fa2d 	bl	8002fd4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	2140      	movs	r1, #64	; 0x40
 8002b80:	4618      	mov	r0, r3
 8002b82:	f000 fa84 	bl	800308e <TIM_ITRx_SetConfig>
      break;
 8002b86:	e009      	b.n	8002b9c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4619      	mov	r1, r3
 8002b92:	4610      	mov	r0, r2
 8002b94:	f000 fa7b 	bl	800308e <TIM_ITRx_SetConfig>
      break;
 8002b98:	e000      	b.n	8002b9c <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002b9a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002bac:	2300      	movs	r3, #0
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3710      	adds	r7, #16
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}

08002bb6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bb6:	b480      	push	{r7}
 8002bb8:	b083      	sub	sp, #12
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002bbe:	bf00      	nop
 8002bc0:	370c      	adds	r7, #12
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bc80      	pop	{r7}
 8002bc6:	4770      	bx	lr

08002bc8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002bd0:	bf00      	nop
 8002bd2:	370c      	adds	r7, #12
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bc80      	pop	{r7}
 8002bd8:	4770      	bx	lr

08002bda <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002bda:	b480      	push	{r7}
 8002bdc:	b083      	sub	sp, #12
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002be2:	bf00      	nop
 8002be4:	370c      	adds	r7, #12
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bc80      	pop	{r7}
 8002bea:	4770      	bx	lr

08002bec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002bf4:	bf00      	nop
 8002bf6:	370c      	adds	r7, #12
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bc80      	pop	{r7}
 8002bfc:	4770      	bx	lr
	...

08002c00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b085      	sub	sp, #20
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	4a29      	ldr	r2, [pc, #164]	; (8002cb8 <TIM_Base_SetConfig+0xb8>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d00b      	beq.n	8002c30 <TIM_Base_SetConfig+0x30>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c1e:	d007      	beq.n	8002c30 <TIM_Base_SetConfig+0x30>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	4a26      	ldr	r2, [pc, #152]	; (8002cbc <TIM_Base_SetConfig+0xbc>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d003      	beq.n	8002c30 <TIM_Base_SetConfig+0x30>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	4a25      	ldr	r2, [pc, #148]	; (8002cc0 <TIM_Base_SetConfig+0xc0>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d108      	bne.n	8002c42 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	68fa      	ldr	r2, [r7, #12]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a1c      	ldr	r2, [pc, #112]	; (8002cb8 <TIM_Base_SetConfig+0xb8>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d00b      	beq.n	8002c62 <TIM_Base_SetConfig+0x62>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c50:	d007      	beq.n	8002c62 <TIM_Base_SetConfig+0x62>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a19      	ldr	r2, [pc, #100]	; (8002cbc <TIM_Base_SetConfig+0xbc>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d003      	beq.n	8002c62 <TIM_Base_SetConfig+0x62>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a18      	ldr	r2, [pc, #96]	; (8002cc0 <TIM_Base_SetConfig+0xc0>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d108      	bne.n	8002c74 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	68db      	ldr	r3, [r3, #12]
 8002c6e:	68fa      	ldr	r2, [r7, #12]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	695b      	ldr	r3, [r3, #20]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	68fa      	ldr	r2, [r7, #12]
 8002c86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	689a      	ldr	r2, [r3, #8]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	4a07      	ldr	r2, [pc, #28]	; (8002cb8 <TIM_Base_SetConfig+0xb8>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d103      	bne.n	8002ca8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	691a      	ldr	r2, [r3, #16]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2201      	movs	r2, #1
 8002cac:	615a      	str	r2, [r3, #20]
}
 8002cae:	bf00      	nop
 8002cb0:	3714      	adds	r7, #20
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bc80      	pop	{r7}
 8002cb6:	4770      	bx	lr
 8002cb8:	40012c00 	.word	0x40012c00
 8002cbc:	40000400 	.word	0x40000400
 8002cc0:	40000800 	.word	0x40000800

08002cc4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b087      	sub	sp, #28
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a1b      	ldr	r3, [r3, #32]
 8002cd2:	f023 0201 	bic.w	r2, r3, #1
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6a1b      	ldr	r3, [r3, #32]
 8002cde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	699b      	ldr	r3, [r3, #24]
 8002cea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f023 0303 	bic.w	r3, r3, #3
 8002cfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	68fa      	ldr	r2, [r7, #12]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	f023 0302 	bic.w	r3, r3, #2
 8002d0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	697a      	ldr	r2, [r7, #20]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	4a1c      	ldr	r2, [pc, #112]	; (8002d8c <TIM_OC1_SetConfig+0xc8>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d10c      	bne.n	8002d3a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	f023 0308 	bic.w	r3, r3, #8
 8002d26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	697a      	ldr	r2, [r7, #20]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	f023 0304 	bic.w	r3, r3, #4
 8002d38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a13      	ldr	r2, [pc, #76]	; (8002d8c <TIM_OC1_SetConfig+0xc8>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d111      	bne.n	8002d66 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002d50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	695b      	ldr	r3, [r3, #20]
 8002d56:	693a      	ldr	r2, [r7, #16]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	699b      	ldr	r3, [r3, #24]
 8002d60:	693a      	ldr	r2, [r7, #16]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	693a      	ldr	r2, [r7, #16]
 8002d6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	68fa      	ldr	r2, [r7, #12]
 8002d70:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	685a      	ldr	r2, [r3, #4]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	697a      	ldr	r2, [r7, #20]
 8002d7e:	621a      	str	r2, [r3, #32]
}
 8002d80:	bf00      	nop
 8002d82:	371c      	adds	r7, #28
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bc80      	pop	{r7}
 8002d88:	4770      	bx	lr
 8002d8a:	bf00      	nop
 8002d8c:	40012c00 	.word	0x40012c00

08002d90 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b087      	sub	sp, #28
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a1b      	ldr	r3, [r3, #32]
 8002d9e:	f023 0210 	bic.w	r2, r3, #16
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a1b      	ldr	r3, [r3, #32]
 8002daa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	699b      	ldr	r3, [r3, #24]
 8002db6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002dbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	021b      	lsls	r3, r3, #8
 8002dce:	68fa      	ldr	r2, [r7, #12]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	f023 0320 	bic.w	r3, r3, #32
 8002dda:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	011b      	lsls	r3, r3, #4
 8002de2:	697a      	ldr	r2, [r7, #20]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4a1d      	ldr	r2, [pc, #116]	; (8002e60 <TIM_OC2_SetConfig+0xd0>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d10d      	bne.n	8002e0c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002df6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	011b      	lsls	r3, r3, #4
 8002dfe:	697a      	ldr	r2, [r7, #20]
 8002e00:	4313      	orrs	r3, r2
 8002e02:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e0a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	4a14      	ldr	r2, [pc, #80]	; (8002e60 <TIM_OC2_SetConfig+0xd0>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d113      	bne.n	8002e3c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002e1a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002e22:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	695b      	ldr	r3, [r3, #20]
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	693a      	ldr	r2, [r7, #16]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	699b      	ldr	r3, [r3, #24]
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	693a      	ldr	r2, [r7, #16]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	693a      	ldr	r2, [r7, #16]
 8002e40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	68fa      	ldr	r2, [r7, #12]
 8002e46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	685a      	ldr	r2, [r3, #4]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	697a      	ldr	r2, [r7, #20]
 8002e54:	621a      	str	r2, [r3, #32]
}
 8002e56:	bf00      	nop
 8002e58:	371c      	adds	r7, #28
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bc80      	pop	{r7}
 8002e5e:	4770      	bx	lr
 8002e60:	40012c00 	.word	0x40012c00

08002e64 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b087      	sub	sp, #28
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a1b      	ldr	r3, [r3, #32]
 8002e72:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6a1b      	ldr	r3, [r3, #32]
 8002e7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	69db      	ldr	r3, [r3, #28]
 8002e8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f023 0303 	bic.w	r3, r3, #3
 8002e9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	68fa      	ldr	r2, [r7, #12]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002eac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	021b      	lsls	r3, r3, #8
 8002eb4:	697a      	ldr	r2, [r7, #20]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a1d      	ldr	r2, [pc, #116]	; (8002f34 <TIM_OC3_SetConfig+0xd0>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d10d      	bne.n	8002ede <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002ec8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	021b      	lsls	r3, r3, #8
 8002ed0:	697a      	ldr	r2, [r7, #20]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002edc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a14      	ldr	r2, [pc, #80]	; (8002f34 <TIM_OC3_SetConfig+0xd0>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d113      	bne.n	8002f0e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002eec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002ef4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	695b      	ldr	r3, [r3, #20]
 8002efa:	011b      	lsls	r3, r3, #4
 8002efc:	693a      	ldr	r2, [r7, #16]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	699b      	ldr	r3, [r3, #24]
 8002f06:	011b      	lsls	r3, r3, #4
 8002f08:	693a      	ldr	r2, [r7, #16]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	693a      	ldr	r2, [r7, #16]
 8002f12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	68fa      	ldr	r2, [r7, #12]
 8002f18:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	685a      	ldr	r2, [r3, #4]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	697a      	ldr	r2, [r7, #20]
 8002f26:	621a      	str	r2, [r3, #32]
}
 8002f28:	bf00      	nop
 8002f2a:	371c      	adds	r7, #28
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bc80      	pop	{r7}
 8002f30:	4770      	bx	lr
 8002f32:	bf00      	nop
 8002f34:	40012c00 	.word	0x40012c00

08002f38 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b087      	sub	sp, #28
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6a1b      	ldr	r3, [r3, #32]
 8002f46:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6a1b      	ldr	r3, [r3, #32]
 8002f52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	69db      	ldr	r3, [r3, #28]
 8002f5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	021b      	lsls	r3, r3, #8
 8002f76:	68fa      	ldr	r2, [r7, #12]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	031b      	lsls	r3, r3, #12
 8002f8a:	693a      	ldr	r2, [r7, #16]
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	4a0f      	ldr	r2, [pc, #60]	; (8002fd0 <TIM_OC4_SetConfig+0x98>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d109      	bne.n	8002fac <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f9e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	695b      	ldr	r3, [r3, #20]
 8002fa4:	019b      	lsls	r3, r3, #6
 8002fa6:	697a      	ldr	r2, [r7, #20]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	697a      	ldr	r2, [r7, #20]
 8002fb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	68fa      	ldr	r2, [r7, #12]
 8002fb6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	685a      	ldr	r2, [r3, #4]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	693a      	ldr	r2, [r7, #16]
 8002fc4:	621a      	str	r2, [r3, #32]
}
 8002fc6:	bf00      	nop
 8002fc8:	371c      	adds	r7, #28
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bc80      	pop	{r7}
 8002fce:	4770      	bx	lr
 8002fd0:	40012c00 	.word	0x40012c00

08002fd4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b087      	sub	sp, #28
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	60f8      	str	r0, [r7, #12]
 8002fdc:	60b9      	str	r1, [r7, #8]
 8002fde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6a1b      	ldr	r3, [r3, #32]
 8002fe4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	6a1b      	ldr	r3, [r3, #32]
 8002fea:	f023 0201 	bic.w	r2, r3, #1
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	699b      	ldr	r3, [r3, #24]
 8002ff6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ffe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	011b      	lsls	r3, r3, #4
 8003004:	693a      	ldr	r2, [r7, #16]
 8003006:	4313      	orrs	r3, r2
 8003008:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	f023 030a 	bic.w	r3, r3, #10
 8003010:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003012:	697a      	ldr	r2, [r7, #20]
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	4313      	orrs	r3, r2
 8003018:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	693a      	ldr	r2, [r7, #16]
 800301e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	697a      	ldr	r2, [r7, #20]
 8003024:	621a      	str	r2, [r3, #32]
}
 8003026:	bf00      	nop
 8003028:	371c      	adds	r7, #28
 800302a:	46bd      	mov	sp, r7
 800302c:	bc80      	pop	{r7}
 800302e:	4770      	bx	lr

08003030 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003030:	b480      	push	{r7}
 8003032:	b087      	sub	sp, #28
 8003034:	af00      	add	r7, sp, #0
 8003036:	60f8      	str	r0, [r7, #12]
 8003038:	60b9      	str	r1, [r7, #8]
 800303a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	6a1b      	ldr	r3, [r3, #32]
 8003040:	f023 0210 	bic.w	r2, r3, #16
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	699b      	ldr	r3, [r3, #24]
 800304c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	6a1b      	ldr	r3, [r3, #32]
 8003052:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800305a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	031b      	lsls	r3, r3, #12
 8003060:	697a      	ldr	r2, [r7, #20]
 8003062:	4313      	orrs	r3, r2
 8003064:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800306c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	011b      	lsls	r3, r3, #4
 8003072:	693a      	ldr	r2, [r7, #16]
 8003074:	4313      	orrs	r3, r2
 8003076:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	697a      	ldr	r2, [r7, #20]
 800307c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	693a      	ldr	r2, [r7, #16]
 8003082:	621a      	str	r2, [r3, #32]
}
 8003084:	bf00      	nop
 8003086:	371c      	adds	r7, #28
 8003088:	46bd      	mov	sp, r7
 800308a:	bc80      	pop	{r7}
 800308c:	4770      	bx	lr

0800308e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800308e:	b480      	push	{r7}
 8003090:	b085      	sub	sp, #20
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
 8003096:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80030a6:	683a      	ldr	r2, [r7, #0]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	f043 0307 	orr.w	r3, r3, #7
 80030b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	68fa      	ldr	r2, [r7, #12]
 80030b6:	609a      	str	r2, [r3, #8]
}
 80030b8:	bf00      	nop
 80030ba:	3714      	adds	r7, #20
 80030bc:	46bd      	mov	sp, r7
 80030be:	bc80      	pop	{r7}
 80030c0:	4770      	bx	lr

080030c2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80030c2:	b480      	push	{r7}
 80030c4:	b087      	sub	sp, #28
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	60f8      	str	r0, [r7, #12]
 80030ca:	60b9      	str	r1, [r7, #8]
 80030cc:	607a      	str	r2, [r7, #4]
 80030ce:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030dc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	021a      	lsls	r2, r3, #8
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	431a      	orrs	r2, r3
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	697a      	ldr	r2, [r7, #20]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	697a      	ldr	r2, [r7, #20]
 80030f4:	609a      	str	r2, [r3, #8]
}
 80030f6:	bf00      	nop
 80030f8:	371c      	adds	r7, #28
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bc80      	pop	{r7}
 80030fe:	4770      	bx	lr

08003100 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003100:	b480      	push	{r7}
 8003102:	b087      	sub	sp, #28
 8003104:	af00      	add	r7, sp, #0
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	60b9      	str	r1, [r7, #8]
 800310a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	f003 031f 	and.w	r3, r3, #31
 8003112:	2201      	movs	r2, #1
 8003114:	fa02 f303 	lsl.w	r3, r2, r3
 8003118:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6a1a      	ldr	r2, [r3, #32]
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	43db      	mvns	r3, r3
 8003122:	401a      	ands	r2, r3
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6a1a      	ldr	r2, [r3, #32]
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	f003 031f 	and.w	r3, r3, #31
 8003132:	6879      	ldr	r1, [r7, #4]
 8003134:	fa01 f303 	lsl.w	r3, r1, r3
 8003138:	431a      	orrs	r2, r3
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	621a      	str	r2, [r3, #32]
}
 800313e:	bf00      	nop
 8003140:	371c      	adds	r7, #28
 8003142:	46bd      	mov	sp, r7
 8003144:	bc80      	pop	{r7}
 8003146:	4770      	bx	lr

08003148 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003148:	b480      	push	{r7}
 800314a:	b085      	sub	sp, #20
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003158:	2b01      	cmp	r3, #1
 800315a:	d101      	bne.n	8003160 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800315c:	2302      	movs	r3, #2
 800315e:	e032      	b.n	80031c6 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2201      	movs	r2, #1
 8003164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2202      	movs	r2, #2
 800316c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003186:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	68fa      	ldr	r2, [r7, #12]
 800318e:	4313      	orrs	r3, r2
 8003190:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003198:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	68ba      	ldr	r2, [r7, #8]
 80031a0:	4313      	orrs	r3, r2
 80031a2:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	68fa      	ldr	r2, [r7, #12]
 80031aa:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	68ba      	ldr	r2, [r7, #8]
 80031b2:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2201      	movs	r2, #1
 80031b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3714      	adds	r7, #20
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bc80      	pop	{r7}
 80031ce:	4770      	bx	lr

080031d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80031d8:	bf00      	nop
 80031da:	370c      	adds	r7, #12
 80031dc:	46bd      	mov	sp, r7
 80031de:	bc80      	pop	{r7}
 80031e0:	4770      	bx	lr

080031e2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80031e2:	b480      	push	{r7}
 80031e4:	b083      	sub	sp, #12
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80031ea:	bf00      	nop
 80031ec:	370c      	adds	r7, #12
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bc80      	pop	{r7}
 80031f2:	4770      	bx	lr

080031f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d101      	bne.n	8003206 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e03f      	b.n	8003286 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800320c:	b2db      	uxtb	r3, r3
 800320e:	2b00      	cmp	r3, #0
 8003210:	d106      	bne.n	8003220 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f7fd fb76 	bl	800090c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2224      	movs	r2, #36	; 0x24
 8003224:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	68da      	ldr	r2, [r3, #12]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003236:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f000 fb8d 	bl	8003958 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	691a      	ldr	r2, [r3, #16]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800324c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	695a      	ldr	r2, [r3, #20]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800325c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	68da      	ldr	r2, [r3, #12]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800326c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2220      	movs	r2, #32
 8003278:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2220      	movs	r2, #32
 8003280:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003284:	2300      	movs	r3, #0
}
 8003286:	4618      	mov	r0, r3
 8003288:	3708      	adds	r7, #8
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}

0800328e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800328e:	b580      	push	{r7, lr}
 8003290:	b088      	sub	sp, #32
 8003292:	af02      	add	r7, sp, #8
 8003294:	60f8      	str	r0, [r7, #12]
 8003296:	60b9      	str	r1, [r7, #8]
 8003298:	603b      	str	r3, [r7, #0]
 800329a:	4613      	mov	r3, r2
 800329c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800329e:	2300      	movs	r3, #0
 80032a0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	2b20      	cmp	r3, #32
 80032ac:	f040 8083 	bne.w	80033b6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d002      	beq.n	80032bc <HAL_UART_Transmit+0x2e>
 80032b6:	88fb      	ldrh	r3, [r7, #6]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d101      	bne.n	80032c0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e07b      	b.n	80033b8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d101      	bne.n	80032ce <HAL_UART_Transmit+0x40>
 80032ca:	2302      	movs	r3, #2
 80032cc:	e074      	b.n	80033b8 <HAL_UART_Transmit+0x12a>
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2201      	movs	r2, #1
 80032d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2200      	movs	r2, #0
 80032da:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2221      	movs	r2, #33	; 0x21
 80032e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80032e4:	f7fd fc54 	bl	8000b90 <HAL_GetTick>
 80032e8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	88fa      	ldrh	r2, [r7, #6]
 80032ee:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	88fa      	ldrh	r2, [r7, #6]
 80032f4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80032f6:	e042      	b.n	800337e <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	3b01      	subs	r3, #1
 8003300:	b29a      	uxth	r2, r3
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800330e:	d122      	bne.n	8003356 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	9300      	str	r3, [sp, #0]
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	2200      	movs	r2, #0
 8003318:	2180      	movs	r1, #128	; 0x80
 800331a:	68f8      	ldr	r0, [r7, #12]
 800331c:	f000 f9b2 	bl	8003684 <UART_WaitOnFlagUntilTimeout>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d001      	beq.n	800332a <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e046      	b.n	80033b8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	881b      	ldrh	r3, [r3, #0]
 8003332:	461a      	mov	r2, r3
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800333c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	691b      	ldr	r3, [r3, #16]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d103      	bne.n	800334e <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	3302      	adds	r3, #2
 800334a:	60bb      	str	r3, [r7, #8]
 800334c:	e017      	b.n	800337e <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	3301      	adds	r3, #1
 8003352:	60bb      	str	r3, [r7, #8]
 8003354:	e013      	b.n	800337e <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	9300      	str	r3, [sp, #0]
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	2200      	movs	r2, #0
 800335e:	2180      	movs	r1, #128	; 0x80
 8003360:	68f8      	ldr	r0, [r7, #12]
 8003362:	f000 f98f 	bl	8003684 <UART_WaitOnFlagUntilTimeout>
 8003366:	4603      	mov	r3, r0
 8003368:	2b00      	cmp	r3, #0
 800336a:	d001      	beq.n	8003370 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 800336c:	2303      	movs	r3, #3
 800336e:	e023      	b.n	80033b8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	1c5a      	adds	r2, r3, #1
 8003374:	60ba      	str	r2, [r7, #8]
 8003376:	781a      	ldrb	r2, [r3, #0]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003382:	b29b      	uxth	r3, r3
 8003384:	2b00      	cmp	r3, #0
 8003386:	d1b7      	bne.n	80032f8 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	9300      	str	r3, [sp, #0]
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	2200      	movs	r2, #0
 8003390:	2140      	movs	r1, #64	; 0x40
 8003392:	68f8      	ldr	r0, [r7, #12]
 8003394:	f000 f976 	bl	8003684 <UART_WaitOnFlagUntilTimeout>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d001      	beq.n	80033a2 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e00a      	b.n	80033b8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2220      	movs	r2, #32
 80033a6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2200      	movs	r2, #0
 80033ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80033b2:	2300      	movs	r3, #0
 80033b4:	e000      	b.n	80033b8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80033b6:	2302      	movs	r3, #2
  }
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3718      	adds	r7, #24
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}

080033c0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b085      	sub	sp, #20
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	60b9      	str	r1, [r7, #8]
 80033ca:	4613      	mov	r3, r2
 80033cc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	2b20      	cmp	r3, #32
 80033d8:	d140      	bne.n	800345c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d002      	beq.n	80033e6 <HAL_UART_Receive_IT+0x26>
 80033e0:	88fb      	ldrh	r3, [r7, #6]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d101      	bne.n	80033ea <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e039      	b.n	800345e <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d101      	bne.n	80033f8 <HAL_UART_Receive_IT+0x38>
 80033f4:	2302      	movs	r3, #2
 80033f6:	e032      	b.n	800345e <HAL_UART_Receive_IT+0x9e>
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2201      	movs	r2, #1
 80033fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	68ba      	ldr	r2, [r7, #8]
 8003404:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	88fa      	ldrh	r2, [r7, #6]
 800340a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	88fa      	ldrh	r2, [r7, #6]
 8003410:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2200      	movs	r2, #0
 8003416:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2222      	movs	r2, #34	; 0x22
 800341c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2200      	movs	r2, #0
 8003424:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	68da      	ldr	r2, [r3, #12]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003436:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	695a      	ldr	r2, [r3, #20]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f042 0201 	orr.w	r2, r2, #1
 8003446:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	68da      	ldr	r2, [r3, #12]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f042 0220 	orr.w	r2, r2, #32
 8003456:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003458:	2300      	movs	r3, #0
 800345a:	e000      	b.n	800345e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800345c:	2302      	movs	r3, #2
  }
}
 800345e:	4618      	mov	r0, r3
 8003460:	3714      	adds	r7, #20
 8003462:	46bd      	mov	sp, r7
 8003464:	bc80      	pop	{r7}
 8003466:	4770      	bx	lr

08003468 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b088      	sub	sp, #32
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	695b      	ldr	r3, [r3, #20]
 8003486:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003488:	2300      	movs	r3, #0
 800348a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800348c:	2300      	movs	r3, #0
 800348e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	f003 030f 	and.w	r3, r3, #15
 8003496:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d10d      	bne.n	80034ba <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	f003 0320 	and.w	r3, r3, #32
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d008      	beq.n	80034ba <HAL_UART_IRQHandler+0x52>
 80034a8:	69bb      	ldr	r3, [r7, #24]
 80034aa:	f003 0320 	and.w	r3, r3, #32
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d003      	beq.n	80034ba <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f000 f9ce 	bl	8003854 <UART_Receive_IT>
      return;
 80034b8:	e0cc      	b.n	8003654 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	f000 80ab 	beq.w	8003618 <HAL_UART_IRQHandler+0x1b0>
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	f003 0301 	and.w	r3, r3, #1
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d105      	bne.n	80034d8 <HAL_UART_IRQHandler+0x70>
 80034cc:	69bb      	ldr	r3, [r7, #24]
 80034ce:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	f000 80a0 	beq.w	8003618 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	f003 0301 	and.w	r3, r3, #1
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d00a      	beq.n	80034f8 <HAL_UART_IRQHandler+0x90>
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d005      	beq.n	80034f8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034f0:	f043 0201 	orr.w	r2, r3, #1
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	f003 0304 	and.w	r3, r3, #4
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d00a      	beq.n	8003518 <HAL_UART_IRQHandler+0xb0>
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	f003 0301 	and.w	r3, r3, #1
 8003508:	2b00      	cmp	r3, #0
 800350a:	d005      	beq.n	8003518 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003510:	f043 0202 	orr.w	r2, r3, #2
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	f003 0302 	and.w	r3, r3, #2
 800351e:	2b00      	cmp	r3, #0
 8003520:	d00a      	beq.n	8003538 <HAL_UART_IRQHandler+0xd0>
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	f003 0301 	and.w	r3, r3, #1
 8003528:	2b00      	cmp	r3, #0
 800352a:	d005      	beq.n	8003538 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003530:	f043 0204 	orr.w	r2, r3, #4
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	f003 0308 	and.w	r3, r3, #8
 800353e:	2b00      	cmp	r3, #0
 8003540:	d00a      	beq.n	8003558 <HAL_UART_IRQHandler+0xf0>
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	f003 0301 	and.w	r3, r3, #1
 8003548:	2b00      	cmp	r3, #0
 800354a:	d005      	beq.n	8003558 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003550:	f043 0208 	orr.w	r2, r3, #8
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800355c:	2b00      	cmp	r3, #0
 800355e:	d078      	beq.n	8003652 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003560:	69fb      	ldr	r3, [r7, #28]
 8003562:	f003 0320 	and.w	r3, r3, #32
 8003566:	2b00      	cmp	r3, #0
 8003568:	d007      	beq.n	800357a <HAL_UART_IRQHandler+0x112>
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	f003 0320 	and.w	r3, r3, #32
 8003570:	2b00      	cmp	r3, #0
 8003572:	d002      	beq.n	800357a <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f000 f96d 	bl	8003854 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	695b      	ldr	r3, [r3, #20]
 8003580:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003584:	2b00      	cmp	r3, #0
 8003586:	bf14      	ite	ne
 8003588:	2301      	movne	r3, #1
 800358a:	2300      	moveq	r3, #0
 800358c:	b2db      	uxtb	r3, r3
 800358e:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003594:	f003 0308 	and.w	r3, r3, #8
 8003598:	2b00      	cmp	r3, #0
 800359a:	d102      	bne.n	80035a2 <HAL_UART_IRQHandler+0x13a>
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d031      	beq.n	8003606 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f000 f8b8 	bl	8003718 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	695b      	ldr	r3, [r3, #20]
 80035ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d023      	beq.n	80035fe <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	695a      	ldr	r2, [r3, #20]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035c4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d013      	beq.n	80035f6 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035d2:	4a22      	ldr	r2, [pc, #136]	; (800365c <HAL_UART_IRQHandler+0x1f4>)
 80035d4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035da:	4618      	mov	r0, r3
 80035dc:	f7fe f82c 	bl	8001638 <HAL_DMA_Abort_IT>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d016      	beq.n	8003614 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80035f0:	4610      	mov	r0, r2
 80035f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035f4:	e00e      	b.n	8003614 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f000 f83b 	bl	8003672 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035fc:	e00a      	b.n	8003614 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f000 f837 	bl	8003672 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003604:	e006      	b.n	8003614 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f000 f833 	bl	8003672 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2200      	movs	r2, #0
 8003610:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003612:	e01e      	b.n	8003652 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003614:	bf00      	nop
    return;
 8003616:	e01c      	b.n	8003652 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800361e:	2b00      	cmp	r3, #0
 8003620:	d008      	beq.n	8003634 <HAL_UART_IRQHandler+0x1cc>
 8003622:	69bb      	ldr	r3, [r7, #24]
 8003624:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003628:	2b00      	cmp	r3, #0
 800362a:	d003      	beq.n	8003634 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f000 f8a4 	bl	800377a <UART_Transmit_IT>
    return;
 8003632:	e00f      	b.n	8003654 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800363a:	2b00      	cmp	r3, #0
 800363c:	d00a      	beq.n	8003654 <HAL_UART_IRQHandler+0x1ec>
 800363e:	69bb      	ldr	r3, [r7, #24]
 8003640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003644:	2b00      	cmp	r3, #0
 8003646:	d005      	beq.n	8003654 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f000 f8eb 	bl	8003824 <UART_EndTransmit_IT>
    return;
 800364e:	bf00      	nop
 8003650:	e000      	b.n	8003654 <HAL_UART_IRQHandler+0x1ec>
    return;
 8003652:	bf00      	nop
  }
}
 8003654:	3720      	adds	r7, #32
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	08003753 	.word	0x08003753

08003660 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003668:	bf00      	nop
 800366a:	370c      	adds	r7, #12
 800366c:	46bd      	mov	sp, r7
 800366e:	bc80      	pop	{r7}
 8003670:	4770      	bx	lr

08003672 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003672:	b480      	push	{r7}
 8003674:	b083      	sub	sp, #12
 8003676:	af00      	add	r7, sp, #0
 8003678:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800367a:	bf00      	nop
 800367c:	370c      	adds	r7, #12
 800367e:	46bd      	mov	sp, r7
 8003680:	bc80      	pop	{r7}
 8003682:	4770      	bx	lr

08003684 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af00      	add	r7, sp, #0
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	60b9      	str	r1, [r7, #8]
 800368e:	603b      	str	r3, [r7, #0]
 8003690:	4613      	mov	r3, r2
 8003692:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003694:	e02c      	b.n	80036f0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800369c:	d028      	beq.n	80036f0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d007      	beq.n	80036b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80036a4:	f7fd fa74 	bl	8000b90 <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	69ba      	ldr	r2, [r7, #24]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d21d      	bcs.n	80036f0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	68da      	ldr	r2, [r3, #12]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80036c2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	695a      	ldr	r2, [r3, #20]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f022 0201 	bic.w	r2, r2, #1
 80036d2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2220      	movs	r2, #32
 80036d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2220      	movs	r2, #32
 80036e0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2200      	movs	r2, #0
 80036e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80036ec:	2303      	movs	r3, #3
 80036ee:	e00f      	b.n	8003710 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	4013      	ands	r3, r2
 80036fa:	68ba      	ldr	r2, [r7, #8]
 80036fc:	429a      	cmp	r2, r3
 80036fe:	bf0c      	ite	eq
 8003700:	2301      	moveq	r3, #1
 8003702:	2300      	movne	r3, #0
 8003704:	b2db      	uxtb	r3, r3
 8003706:	461a      	mov	r2, r3
 8003708:	79fb      	ldrb	r3, [r7, #7]
 800370a:	429a      	cmp	r2, r3
 800370c:	d0c3      	beq.n	8003696 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800370e:	2300      	movs	r3, #0
}
 8003710:	4618      	mov	r0, r3
 8003712:	3710      	adds	r7, #16
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}

08003718 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	68da      	ldr	r2, [r3, #12]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800372e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	695a      	ldr	r2, [r3, #20]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f022 0201 	bic.w	r2, r2, #1
 800373e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2220      	movs	r2, #32
 8003744:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003748:	bf00      	nop
 800374a:	370c      	adds	r7, #12
 800374c:	46bd      	mov	sp, r7
 800374e:	bc80      	pop	{r7}
 8003750:	4770      	bx	lr

08003752 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003752:	b580      	push	{r7, lr}
 8003754:	b084      	sub	sp, #16
 8003756:	af00      	add	r7, sp, #0
 8003758:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2200      	movs	r2, #0
 8003764:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2200      	movs	r2, #0
 800376a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800376c:	68f8      	ldr	r0, [r7, #12]
 800376e:	f7ff ff80 	bl	8003672 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003772:	bf00      	nop
 8003774:	3710      	adds	r7, #16
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}

0800377a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800377a:	b480      	push	{r7}
 800377c:	b085      	sub	sp, #20
 800377e:	af00      	add	r7, sp, #0
 8003780:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003788:	b2db      	uxtb	r3, r3
 800378a:	2b21      	cmp	r3, #33	; 0x21
 800378c:	d144      	bne.n	8003818 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003796:	d11a      	bne.n	80037ce <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6a1b      	ldr	r3, [r3, #32]
 800379c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	881b      	ldrh	r3, [r3, #0]
 80037a2:	461a      	mov	r2, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037ac:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	691b      	ldr	r3, [r3, #16]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d105      	bne.n	80037c2 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6a1b      	ldr	r3, [r3, #32]
 80037ba:	1c9a      	adds	r2, r3, #2
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	621a      	str	r2, [r3, #32]
 80037c0:	e00e      	b.n	80037e0 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a1b      	ldr	r3, [r3, #32]
 80037c6:	1c5a      	adds	r2, r3, #1
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	621a      	str	r2, [r3, #32]
 80037cc:	e008      	b.n	80037e0 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6a1b      	ldr	r3, [r3, #32]
 80037d2:	1c59      	adds	r1, r3, #1
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	6211      	str	r1, [r2, #32]
 80037d8:	781a      	ldrb	r2, [r3, #0]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	3b01      	subs	r3, #1
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	4619      	mov	r1, r3
 80037ee:	84d1      	strh	r1, [r2, #38]	; 0x26
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d10f      	bne.n	8003814 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	68da      	ldr	r2, [r3, #12]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003802:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	68da      	ldr	r2, [r3, #12]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003812:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003814:	2300      	movs	r3, #0
 8003816:	e000      	b.n	800381a <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003818:	2302      	movs	r3, #2
  }
}
 800381a:	4618      	mov	r0, r3
 800381c:	3714      	adds	r7, #20
 800381e:	46bd      	mov	sp, r7
 8003820:	bc80      	pop	{r7}
 8003822:	4770      	bx	lr

08003824 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b082      	sub	sp, #8
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	68da      	ldr	r2, [r3, #12]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800383a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2220      	movs	r2, #32
 8003840:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f7ff ff0b 	bl	8003660 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800384a:	2300      	movs	r3, #0
}
 800384c:	4618      	mov	r0, r3
 800384e:	3708      	adds	r7, #8
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003862:	b2db      	uxtb	r3, r3
 8003864:	2b22      	cmp	r3, #34	; 0x22
 8003866:	d171      	bne.n	800394c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003870:	d123      	bne.n	80038ba <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003876:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	691b      	ldr	r3, [r3, #16]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d10e      	bne.n	800389e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	b29b      	uxth	r3, r3
 8003888:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800388c:	b29a      	uxth	r2, r3
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003896:	1c9a      	adds	r2, r3, #2
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	629a      	str	r2, [r3, #40]	; 0x28
 800389c:	e029      	b.n	80038f2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	b29a      	uxth	r2, r3
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b2:	1c5a      	adds	r2, r3, #1
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	629a      	str	r2, [r3, #40]	; 0x28
 80038b8:	e01b      	b.n	80038f2 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d10a      	bne.n	80038d8 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	6858      	ldr	r0, [r3, #4]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038cc:	1c59      	adds	r1, r3, #1
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	6291      	str	r1, [r2, #40]	; 0x28
 80038d2:	b2c2      	uxtb	r2, r0
 80038d4:	701a      	strb	r2, [r3, #0]
 80038d6:	e00c      	b.n	80038f2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	b2da      	uxtb	r2, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e4:	1c58      	adds	r0, r3, #1
 80038e6:	6879      	ldr	r1, [r7, #4]
 80038e8:	6288      	str	r0, [r1, #40]	; 0x28
 80038ea:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80038ee:	b2d2      	uxtb	r2, r2
 80038f0:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	3b01      	subs	r3, #1
 80038fa:	b29b      	uxth	r3, r3
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	4619      	mov	r1, r3
 8003900:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003902:	2b00      	cmp	r3, #0
 8003904:	d120      	bne.n	8003948 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	68da      	ldr	r2, [r3, #12]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f022 0220 	bic.w	r2, r2, #32
 8003914:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	68da      	ldr	r2, [r3, #12]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003924:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	695a      	ldr	r2, [r3, #20]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f022 0201 	bic.w	r2, r2, #1
 8003934:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2220      	movs	r2, #32
 800393a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f7fc fc18 	bl	8000174 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003944:	2300      	movs	r3, #0
 8003946:	e002      	b.n	800394e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003948:	2300      	movs	r3, #0
 800394a:	e000      	b.n	800394e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800394c:	2302      	movs	r3, #2
  }
}
 800394e:	4618      	mov	r0, r3
 8003950:	3710      	adds	r7, #16
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
	...

08003958 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	68da      	ldr	r2, [r3, #12]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	430a      	orrs	r2, r1
 8003974:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	689a      	ldr	r2, [r3, #8]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	691b      	ldr	r3, [r3, #16]
 800397e:	431a      	orrs	r2, r3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	695b      	ldr	r3, [r3, #20]
 8003984:	4313      	orrs	r3, r2
 8003986:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003992:	f023 030c 	bic.w	r3, r3, #12
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	6812      	ldr	r2, [r2, #0]
 800399a:	68f9      	ldr	r1, [r7, #12]
 800399c:	430b      	orrs	r3, r1
 800399e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	695b      	ldr	r3, [r3, #20]
 80039a6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	699a      	ldr	r2, [r3, #24]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	430a      	orrs	r2, r1
 80039b4:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a52      	ldr	r2, [pc, #328]	; (8003b04 <UART_SetConfig+0x1ac>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d14e      	bne.n	8003a5e <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80039c0:	f7fe fc24 	bl	800220c <HAL_RCC_GetPCLK2Freq>
 80039c4:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80039c6:	68ba      	ldr	r2, [r7, #8]
 80039c8:	4613      	mov	r3, r2
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	4413      	add	r3, r2
 80039ce:	009a      	lsls	r2, r3, #2
 80039d0:	441a      	add	r2, r3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039dc:	4a4a      	ldr	r2, [pc, #296]	; (8003b08 <UART_SetConfig+0x1b0>)
 80039de:	fba2 2303 	umull	r2, r3, r2, r3
 80039e2:	095b      	lsrs	r3, r3, #5
 80039e4:	0119      	lsls	r1, r3, #4
 80039e6:	68ba      	ldr	r2, [r7, #8]
 80039e8:	4613      	mov	r3, r2
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	4413      	add	r3, r2
 80039ee:	009a      	lsls	r2, r3, #2
 80039f0:	441a      	add	r2, r3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80039fc:	4b42      	ldr	r3, [pc, #264]	; (8003b08 <UART_SetConfig+0x1b0>)
 80039fe:	fba3 0302 	umull	r0, r3, r3, r2
 8003a02:	095b      	lsrs	r3, r3, #5
 8003a04:	2064      	movs	r0, #100	; 0x64
 8003a06:	fb00 f303 	mul.w	r3, r0, r3
 8003a0a:	1ad3      	subs	r3, r2, r3
 8003a0c:	011b      	lsls	r3, r3, #4
 8003a0e:	3332      	adds	r3, #50	; 0x32
 8003a10:	4a3d      	ldr	r2, [pc, #244]	; (8003b08 <UART_SetConfig+0x1b0>)
 8003a12:	fba2 2303 	umull	r2, r3, r2, r3
 8003a16:	095b      	lsrs	r3, r3, #5
 8003a18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a1c:	4419      	add	r1, r3
 8003a1e:	68ba      	ldr	r2, [r7, #8]
 8003a20:	4613      	mov	r3, r2
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	4413      	add	r3, r2
 8003a26:	009a      	lsls	r2, r3, #2
 8003a28:	441a      	add	r2, r3
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a34:	4b34      	ldr	r3, [pc, #208]	; (8003b08 <UART_SetConfig+0x1b0>)
 8003a36:	fba3 0302 	umull	r0, r3, r3, r2
 8003a3a:	095b      	lsrs	r3, r3, #5
 8003a3c:	2064      	movs	r0, #100	; 0x64
 8003a3e:	fb00 f303 	mul.w	r3, r0, r3
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	011b      	lsls	r3, r3, #4
 8003a46:	3332      	adds	r3, #50	; 0x32
 8003a48:	4a2f      	ldr	r2, [pc, #188]	; (8003b08 <UART_SetConfig+0x1b0>)
 8003a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a4e:	095b      	lsrs	r3, r3, #5
 8003a50:	f003 020f 	and.w	r2, r3, #15
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	440a      	add	r2, r1
 8003a5a:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8003a5c:	e04d      	b.n	8003afa <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8003a5e:	f7fe fbc1 	bl	80021e4 <HAL_RCC_GetPCLK1Freq>
 8003a62:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a64:	68ba      	ldr	r2, [r7, #8]
 8003a66:	4613      	mov	r3, r2
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	4413      	add	r3, r2
 8003a6c:	009a      	lsls	r2, r3, #2
 8003a6e:	441a      	add	r2, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a7a:	4a23      	ldr	r2, [pc, #140]	; (8003b08 <UART_SetConfig+0x1b0>)
 8003a7c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a80:	095b      	lsrs	r3, r3, #5
 8003a82:	0119      	lsls	r1, r3, #4
 8003a84:	68ba      	ldr	r2, [r7, #8]
 8003a86:	4613      	mov	r3, r2
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	4413      	add	r3, r2
 8003a8c:	009a      	lsls	r2, r3, #2
 8003a8e:	441a      	add	r2, r3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a9a:	4b1b      	ldr	r3, [pc, #108]	; (8003b08 <UART_SetConfig+0x1b0>)
 8003a9c:	fba3 0302 	umull	r0, r3, r3, r2
 8003aa0:	095b      	lsrs	r3, r3, #5
 8003aa2:	2064      	movs	r0, #100	; 0x64
 8003aa4:	fb00 f303 	mul.w	r3, r0, r3
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	011b      	lsls	r3, r3, #4
 8003aac:	3332      	adds	r3, #50	; 0x32
 8003aae:	4a16      	ldr	r2, [pc, #88]	; (8003b08 <UART_SetConfig+0x1b0>)
 8003ab0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ab4:	095b      	lsrs	r3, r3, #5
 8003ab6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003aba:	4419      	add	r1, r3
 8003abc:	68ba      	ldr	r2, [r7, #8]
 8003abe:	4613      	mov	r3, r2
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	4413      	add	r3, r2
 8003ac4:	009a      	lsls	r2, r3, #2
 8003ac6:	441a      	add	r2, r3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ad2:	4b0d      	ldr	r3, [pc, #52]	; (8003b08 <UART_SetConfig+0x1b0>)
 8003ad4:	fba3 0302 	umull	r0, r3, r3, r2
 8003ad8:	095b      	lsrs	r3, r3, #5
 8003ada:	2064      	movs	r0, #100	; 0x64
 8003adc:	fb00 f303 	mul.w	r3, r0, r3
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	011b      	lsls	r3, r3, #4
 8003ae4:	3332      	adds	r3, #50	; 0x32
 8003ae6:	4a08      	ldr	r2, [pc, #32]	; (8003b08 <UART_SetConfig+0x1b0>)
 8003ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8003aec:	095b      	lsrs	r3, r3, #5
 8003aee:	f003 020f 	and.w	r2, r3, #15
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	440a      	add	r2, r1
 8003af8:	609a      	str	r2, [r3, #8]
}
 8003afa:	bf00      	nop
 8003afc:	3710      	adds	r7, #16
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop
 8003b04:	40013800 	.word	0x40013800
 8003b08:	51eb851f 	.word	0x51eb851f

08003b0c <__libc_init_array>:
 8003b0c:	b570      	push	{r4, r5, r6, lr}
 8003b0e:	2500      	movs	r5, #0
 8003b10:	4e0c      	ldr	r6, [pc, #48]	; (8003b44 <__libc_init_array+0x38>)
 8003b12:	4c0d      	ldr	r4, [pc, #52]	; (8003b48 <__libc_init_array+0x3c>)
 8003b14:	1ba4      	subs	r4, r4, r6
 8003b16:	10a4      	asrs	r4, r4, #2
 8003b18:	42a5      	cmp	r5, r4
 8003b1a:	d109      	bne.n	8003b30 <__libc_init_array+0x24>
 8003b1c:	f000 f822 	bl	8003b64 <_init>
 8003b20:	2500      	movs	r5, #0
 8003b22:	4e0a      	ldr	r6, [pc, #40]	; (8003b4c <__libc_init_array+0x40>)
 8003b24:	4c0a      	ldr	r4, [pc, #40]	; (8003b50 <__libc_init_array+0x44>)
 8003b26:	1ba4      	subs	r4, r4, r6
 8003b28:	10a4      	asrs	r4, r4, #2
 8003b2a:	42a5      	cmp	r5, r4
 8003b2c:	d105      	bne.n	8003b3a <__libc_init_array+0x2e>
 8003b2e:	bd70      	pop	{r4, r5, r6, pc}
 8003b30:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003b34:	4798      	blx	r3
 8003b36:	3501      	adds	r5, #1
 8003b38:	e7ee      	b.n	8003b18 <__libc_init_array+0xc>
 8003b3a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003b3e:	4798      	blx	r3
 8003b40:	3501      	adds	r5, #1
 8003b42:	e7f2      	b.n	8003b2a <__libc_init_array+0x1e>
 8003b44:	08003bbc 	.word	0x08003bbc
 8003b48:	08003bbc 	.word	0x08003bbc
 8003b4c:	08003bbc 	.word	0x08003bbc
 8003b50:	08003bc0 	.word	0x08003bc0

08003b54 <memset>:
 8003b54:	4603      	mov	r3, r0
 8003b56:	4402      	add	r2, r0
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d100      	bne.n	8003b5e <memset+0xa>
 8003b5c:	4770      	bx	lr
 8003b5e:	f803 1b01 	strb.w	r1, [r3], #1
 8003b62:	e7f9      	b.n	8003b58 <memset+0x4>

08003b64 <_init>:
 8003b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b66:	bf00      	nop
 8003b68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b6a:	bc08      	pop	{r3}
 8003b6c:	469e      	mov	lr, r3
 8003b6e:	4770      	bx	lr

08003b70 <_fini>:
 8003b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b72:	bf00      	nop
 8003b74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b76:	bc08      	pop	{r3}
 8003b78:	469e      	mov	lr, r3
 8003b7a:	4770      	bx	lr
